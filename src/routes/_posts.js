let posts;
export default posts = [{"post_image": "https://library.scalyr.com/2019/09/12083102/Python-Scalyr-Colors-with-Log.png", "author_name":"xmonader", "author_email":"xmonader@gmail.com","author_image":"https://wiki.haskell.org/wikiupload/a/a4/Haskell_h_jdr.png", "title": "Advent of Nim", "slug": "advent-of-nim", "content": "\nSaturday December 1st at 5 a.m. UTC will mark the start of the fourth incarnation of [Advent of Code](https://adventofcode.com/), popular programming contest started back in 2015.\nThe author describes Advent of Code (AoC) as \"*a series of small programming puzzles for a variety of skill sets and skill levels in any programming language you like*\".\n\nThe rules of AoC are quite simple.\nStarting from December 1st until Christmas, every day at 5 a.m. UTC a new task is released.\nThe tasks consist of two parts, where second part is revealed after you solve the first part, and it is a continuation and/or variation of the first part.\nYou don't submit your code, just the result of your calculation.\n\nThe participation in AoC is free (although, if you like it, consider [donating](https://adventofcode.com/2018/support)), all you need to do is log in with your Github, Google, Twitter, or Reddit account.\n\n\n\n## Nim leaderboard\n\nWe are organizing the official Nim [private leaderboard](https://adventofcode.com/2018/leaderboard/private), where you can compete against other Nim users.\nTo join the Nim leaderboard, all you have to do is use `40415-c732e66e` code in the previous link.\n\nThe Nim team has decided to reward the best (fastest) player on Nim leaderboard, as well as the solutions which best showcase the power and capabilities of Nim language.\nPost a link to your AoC repository in [this forum thread](https://forum.nim-lang.org/t/4416) and share the solutions you're most proud of, and maybe you'll be one of the winners of [\"Nim in Action\"](https://book.picheta.me/) book, Nim [T-shirt](https://vangogh.teespring.com/v3/image/RBPbLAWhGKK_o7nwZHp6gYTN1d8/480/560.jpg), or stickers.\n\nPeople usually share their solutions on [r/adventofcode subreddit](https://old.reddit.com/r/adventofcode/) and we encourage you to share your Nim solutions there too.\n\nIf you have never participated in AoC before or you want to prepare yourself for the start of the competition by solving some tasks, take a look at [the previous events](https://adventofcode.com/2018/events).", "content_with_meta": "---\ntitle: Advent of Nim\nauthor: The Nim Team\ntags: nim, python, markdown\n---\n\nSaturday December 1st at 5 a.m. UTC will mark the start of the fourth incarnation of [Advent of Code](https://adventofcode.com/), popular programming contest started back in 2015.\nThe author describes Advent of Code (AoC) as \"*a series of small programming puzzles for a variety of skill sets and skill levels in any programming language you like*\".\n\nThe rules of AoC are quite simple.\nStarting from December 1st until Christmas, every day at 5 a.m. UTC a new task is released.\nThe tasks consist of two parts, where second part is revealed after you solve the first part, and it is a continuation and/or variation of the first part.\nYou don't submit your code, just the result of your calculation.\n\nThe participation in AoC is free (although, if you like it, consider [donating](https://adventofcode.com/2018/support)), all you need to do is log in with your Github, Google, Twitter, or Reddit account.\n\n\n\n## Nim leaderboard\n\nWe are organizing the official Nim [private leaderboard](https://adventofcode.com/2018/leaderboard/private), where you can compete against other Nim users.\nTo join the Nim leaderboard, all you have to do is use `40415-c732e66e` code in the previous link.\n\nThe Nim team has decided to reward the best (fastest) player on Nim leaderboard, as well as the solutions which best showcase the power and capabilities of Nim language.\nPost a link to your AoC repository in [this forum thread](https://forum.nim-lang.org/t/4416) and share the solutions you're most proud of, and maybe you'll be one of the winners of [\"Nim in Action\"](https://book.picheta.me/) book, Nim [T-shirt](https://vangogh.teespring.com/v3/image/RBPbLAWhGKK_o7nwZHp6gYTN1d8/480/560.jpg), or stickers.\n\nPeople usually share their solutions on [r/adventofcode subreddit](https://old.reddit.com/r/adventofcode/) and we encourage you to share your Nim solutions there too.\n\nIf you have never participated in AoC before or you want to prepare yourself for the start of the competition by solving some tasks, take a look at [the previous events](https://adventofcode.com/2018/events).\n", "tags": ["nim", "python", "markdown"], "published_at": "2019-8-25", "id": 6}, {"author_name":"xmonader", "post_image": "https://upload.wikimedia.org/wikipedia/en/thumb/e/ec/Lisa_Simpson.png/220px-Lisa_Simpson.png", "author_email":"xmonader@gmail.com","author_image":"me.jpg","title": "We're hiring!", "slug": "nim-is-hiring", "content": "\n## Become a Nim core developer\n\nNim is proving to be an increasingly reliable workhorse for every day\nprogramming jobs since you can productively use it both client-side and\nserver-side thanks to its innovate language core that maps well to lower\nlevel representations like C and LLVM as well as to high level\nJavaScript. It comes as no surprise then, that Nim is growing and looking\nfor new core developers!\n\nAs a member of the team, you have a direct impact on design and feature enhancements\nof the Nim programming language.\n\nNim covers a broad range of topics leading to a constant stream of challenges\nwhich require you to continually be innovative with an evolving set of technologies.\n\nSo if you seek a new challenge, if you are experienced in production quality\ncompiler development, if you enjoy working from home, don't hesitate to\napply.\n\n\n## Requirements\n\nThis is your chance to get to work with one of the leading experts in compiler\ndevelopment, meta programming and language design. Here are our requirements:\n\n- Fluent in C++, C, Nim. You should have some Nim related github projects to\n  make it easier for us to judge your skills.\n- Basic knowledge of the lexing, parsing and semantic checking passes a compiler\n  consists of.\n- Knowledge in Nim's standard library; the standard library covers parsers,\n  asynchronous programming, dealing with time and timezones, IO, multi-threaded\n  programming, networking, as well as knowledge about the Posix and the\n  Windows API.\n- Knowledge about type theory and the foundations of programming languages.\n  We are not just looking for programmers, Nim's specification also needs to\n  be improved and extended.\n- Experience in IDE development, there is no reason Nim's tooling can't rival\n  the state-of-the-art when it comes to error messages, auto-completion and\n  automatic refactorings.\n\nNote that you don't have to fulfill *every* one of these criteria; Nim is a\nlarge project with plenty of work covering diverse topics and our requirements\nreflect this.\n\n\n## How to apply\n\nSend your application to `jobs@nim-lang.org`.", "content_with_meta": "---\ntitle: \"We're hiring!\"\nauthor: Nim Team\nexcerpt: \"This is your chance to get to work with one of the leading experts in compiler\ndevelopment, meta programming and language design.\"\ntags: nim, python, markdown\n---\n\n## Become a Nim core developer\n\nNim is proving to be an increasingly reliable workhorse for every day\nprogramming jobs since you can productively use it both client-side and\nserver-side thanks to its innovate language core that maps well to lower\nlevel representations like C and LLVM as well as to high level\nJavaScript. It comes as no surprise then, that Nim is growing and looking\nfor new core developers!\n\nAs a member of the team, you have a direct impact on design and feature enhancements\nof the Nim programming language.\n\nNim covers a broad range of topics leading to a constant stream of challenges\nwhich require you to continually be innovative with an evolving set of technologies.\n\nSo if you seek a new challenge, if you are experienced in production quality\ncompiler development, if you enjoy working from home, don't hesitate to\napply.\n\n\n## Requirements\n\nThis is your chance to get to work with one of the leading experts in compiler\ndevelopment, meta programming and language design. Here are our requirements:\n\n- Fluent in C++, C, Nim. You should have some Nim related github projects to\n  make it easier for us to judge your skills.\n- Basic knowledge of the lexing, parsing and semantic checking passes a compiler\n  consists of.\n- Knowledge in Nim's standard library; the standard library covers parsers,\n  asynchronous programming, dealing with time and timezones, IO, multi-threaded\n  programming, networking, as well as knowledge about the Posix and the\n  Windows API.\n- Knowledge about type theory and the foundations of programming languages.\n  We are not just looking for programmers, Nim's specification also needs to\n  be improved and extended.\n- Experience in IDE development, there is no reason Nim's tooling can't rival\n  the state-of-the-art when it comes to error messages, auto-completion and\n  automatic refactorings.\n\nNote that you don't have to fulfill *every* one of these criteria; Nim is a\nlarge project with plenty of work covering diverse topics and our requirements\nreflect this.\n\n\n## How to apply\n\nSend your application to `jobs@nim-lang.org`.\n", "tags":[], "published_at": "2019-8-24", "id": 7}, {"author_name":"xmonader", "author_email":"xmonader@gmail.com","author_image":"me.jpg","title": "Nim: The good, the OK, and the hard", "slug": "nim-good-ok-hard", "content": "\n## Background\n\nI'm a software engineer at [ThreeFoldTech](https://threefold.io) and the author of [Nim Days](https://xmonader.github.io/nimdays)\n\nOne of the projects we develop at ThreeFoldTech is [Zero-OS](https://github.com/threefoldtech/0-core) a stateless Linux operating system designed for clustered deployments to host virtual machines and containerized applications.\nWe wanted to have a CLI (like docker) to manage the containers and communicate with zero-os instead of using Python client.\n\n\n## Application requirements\n- single binary\n- zos should be like docker for dockerd\n- commands to interact with zero-os (via redis)\n- subcommands to interact with containers on zero-os\n- documentation (soft documentation, hard documentation)\n- tabular output for humans (listing containers and such) \n- support json output when needed too (for further manipulation by tools like jq)\n\nSounds simple enough. Any language would do just fine\n\n\n## Choosing Nim\n\nFrom [Nim](https://nim-lang.org) website\n\n> Nim is a systems and applications programming language. Statically typed and compiled, it provides unparalleled performance in an elegant package.\n- High-performance garbage-collected language\n- Compiles to C, C++ or JavaScript\n- Produces dependency-free binaries\n- Runs on Windows, macOS, Linux, and more\n\n\n\nIn the upcoming sections, I'll talk about the good, the okay, and the hard points I faced while developing this simple CLI application with the requirements above.\n\n\n## The good\n\n### Static typing\nNim eliminates a whole class of errors by being statically typed\n\n### Expressiveness \nNim is like python (whitespace sensitive language) and there's even a guide on the official repo [Nim for Python programmers](https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers). Seeing some of Pascal concepts in Nim gets me very nostalgic too.\n\n{% highlight nim %}\nimport strutils, strformat, os, ospaths, osproc, tables, parsecfg, json, marshal, logging\nimport net, asyncdispatch, asyncnet, streams, threadpool, uri\nimport logging\nimport algorithm\nimport base64\n\nimport redisclient, redisparser\nimport asciitables\nimport docopt\nproc checkContainerExists*(this:App, containerid:int): bool=\n  ## checks if container `containerid` exists or not\n  try:\n    discard this.containerInfo(containerid)\n    result = true\n  except:\n    result = false\n{% endhighlight %}\n\n\nI find UFCS (Uniform Function Call Syntax) really great too [excellent nim basics](https://narimiran.github.io/nim-basics/)\n\n{% highlight nim %}\nproc plus(x, y: int): int =  # <1>\n  return x + y\n\nproc multi(x, y: int): int =\n  return x * y\n\nlet\n  a = 2\n  b = 3\n  c = 4\n\necho a.plus(b) == plus(a, b)\necho c.multi(a) == multi(c, a)\n\n\necho a.plus(b).multi(c)  # <2>\necho c.multi(b).plus(a)  # <3>\n{% endhighlight %}\n\nAlso case insensitivity `toUpper` `toupper` `to_upper` is pretty neat\n> I don't use the same identifier with different cases in the same scope \n\n\n{% highlight nim %}\ntype ContainerInfo* = object of RootObj\n  id*: string\n  cpu*: float\n  root*: string\n  hostname*: string\n  name*: string\n  storage*: string\n  pid*: int\n  ports*: string\n{% endhighlight %}\n\nI like the way of defining types, enums and access control `*` means public.\n\n\n### Developing sync, async in the same interface\n\n> Pragmas are Nim's method to give the compiler additional information/commands without introducing a massive number of new keywords. Pragmas are processed on the fly during semantic checking. Pragmas are enclosed in the special {. and .} curly brackets. Pragmas are also often used as a first implementation to play with a language feature before a nicer syntax to access the feature becomes available.\n\nI'm a fan of `multisync` pragma because it allows you to define procs for async, sync code easily\n\n{% highlight nim %}\n\n\nproc readMany(this:Redis|AsyncRedis, count:int=1): Future[string] {.multisync.} =\n  if count == 0:\n    return \"\"\n  let data = await this.receiveManaged(count)\n  return data\n\n{% endhighlight %}\nBasically in sync execution multisync will remove Future, and await from the code definition and will leave them in case of async execution\n\n### The tooling\n\n#### vscode-nim\n[vscode-nim](https://github.com/pragmagic/vscode-nim) is my daily driver, works as expected, but sometimes it consumes so much memory. there's also [LSP](https://github.com/PMunch/nimlsp) in the works \n\n#### nimble\nEverything you expect from the package manager, creating projects, custom tasks, managing dependencies and publishing (too coupled with github, but that's fine with me)\n\n\n#### Generating documentation\n[nim doc](https://nim-lang.org/docs/docgen.html) is the default tool in Nim to generate indexed and searchable documentation for the project\n\nHere's a nimble task to generate documentation\n{% highlight nim%}\ntask genDocs, \"Create code documentation for zos\":\n    exec \"nim doc --project src/zos.nim \"\n{% endhighlight %}\n\n\n{% highlight bash %}\nnim doc src/zos.nim \nHint: used config file '/home/xmonader/.choosenim/toolchains/nim-0.19.0/config/nim.cfg' [Conf]\nHint: used config file '/home/xmonader/.choosenim/toolchains/nim-0.19.0/config/nimdoc.cfg' [Conf]\nHint: system [Processing]\nHint: zos [Processing]\nHint: strutils [Processing]\nHint: parseutils [Processing]\nHint: math [Processing]\nHint: bitops [Processing]\nHint: algorithm [Processing]\nHint: unicode [Processing]\nHint: strformat [Processing]\nHint: macros [Processing]\nHint: os [Processing]\nHint: times [Processing]\nHint: options [Processing]\nHint: typetraits [Processing]\nHint: posix [Processing]\nHint: ospaths [Processing]\nHint: osproc [Processing]\nHint: strtabs [Processing]\nHint: hashes [Processing]\nHint: streams [Processing]\nHint: cpuinfo [Processing]\nHint: linux [Processing]\nHint: tables [Processing]\nHint: parsecfg [Processing]\nHint: lexbase [Processing]\nHint: json [Processing]\nHint: parsejson [Processing]\nHint: marshal [Processing]\nHint: typeinfo [Processing]\nHint: intsets [Processing]\nHint: logging [Processing]\nHint: net [Processing]\nHint: nativesockets [Processing]\nHint: winlean [Processing]\nHint: dynlib [Processing]\nHint: sets [Processing]\nHint: openssl [Processing]\nHint: asyncdispatch [Processing]\nHint: heapqueue [Processing]\nHint: lists [Processing]\nHint: asyncstreams [Processing]\nHint: asyncfutures [Processing]\nHint: deques [Processing]\nHint: cstrutils [Processing]\nHint: asyncnet [Processing]\nHint: threadpool [Processing]\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(13, 10) Error: Threadpool requires --threads:on option.\nHint: cpuload [Processing]\nHint: locks [Processing]\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 26) Error: undeclared identifier: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 31) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 31) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 31) Error: expression 'fence' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(78, 8) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(78, 8) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(78, 8) Error: expression 'fence' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(81, 10) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(81, 10) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(81, 10) Error: expression 'fence' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(83, 10) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(83, 10) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(83, 10) Error: expression 'fence' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(360, 37) Error: undeclared identifier: 'Thread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(360, 43) Error: no generic parameters allowed for Thread\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(363, 54) Error: no generic parameters allowed for Thread\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 3) Error: undeclared identifier: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 15) Error: attempting to call undeclared routine: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 15) Error: attempting to call undeclared routine: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 15) Error: expression 'createThread' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(404, 15) Error: attempting to call undeclared routine: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(404, 15) Error: attempting to call undeclared routine: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(404, 15) Error: expression 'createThread' cannot be called\nHint: uri [Processing]\nHint: base64 [Processing]\nHint: redisclient [Processing]\nHint: redisparser [Processing]\nHint: sequtils [Processing]\nHint: docopt [Processing]\nHint: nre [Processing]\nHint: pcre [Processing]\nHint: util [Processing]\nHint: util [Processing]\nHint: logger [Processing]\nHint: settings [Processing]\nHint: apphelp [Processing]\nHint: errorcodes [Processing]\nHint: sshexec [Processing]\nHint: hostnamegenerator [Processing]\nHint: random [Processing]\nHint: app [Processing]\nHint: asciitables [Processing]\nHint: zosclient [Processing]\nHint: uuids [Processing]\nHint: isaac [Processing]\nHint: urandom [Processing]\nHint: vbox [Processing]\n\n{% endhighlight %} \nNo idea why `generating docs` gives these errors (most likely because I'm using threadpool in my code?) so I went with my gut feeling and `--threads:on` \n{% highlight nim%}\ntask genDocs, \"Create code documentation for zos\":\n    exec \"nim doc  --threads:on --project src/zos.nim \"\n{% endhighlight %}\nand now it works just fine, and earned its place in the Good parts.\n\n\n## the OK\nThese are the OK parts that can be improved in my opinion\n\n### Documentation\nThere's a great community effort to provide [documentation](https://nim-lang.org/documentation.html). I hope we get more and more soft documentation and better quality on the official docs too.\n\n\n### Weird symbols / json\nNim chooses unreadable symbols `%*` and `$$` over clear names like dumps or loads :(\n\n### Error Messages\nSometimes the error messages aren't good enough. For instance, I got [i is not accessible](https://github.com/nim-lang/Nim/blob/27b081d1f77604ee47c886e69dbc52f53ea3741f/lib/system/chcks.nim#L21) and even with using `writeStackTrace` I couldn't get anything useful. So I grepped the codebase where `accessible` comes from and continued from there.\n\nAnother example was this \n{% highlight bash %}\ntimeddoutable.nim(44, 16) template/generic instantiation from here\ntimeddoutable.nim(34, 6) Error: type mismatch: got <Thread[ptr Channel[system.bool]], proc (cancelChan: ptr Channel[system.bool]):bool{.gcsafe, locks: 0.}, ptr Channel[system.bool]>\nbut expected one of:\nproc createThread[TArg](t: var Thread[TArg];\n                       tp: proc (arg: TArg) {.thread, nimcall.}; param: TArg)\n  first type mismatch at position: 2\n  required type: proc (arg: TArg){.gcsafe.}\n  but expression 'p' is of type: proc (cancelChan: ptr Channel[system.bool]): bool{.gcsafe, locks: 0.}\nproc createThread(t: var Thread[void]; tp: proc () {.thread, nimcall.})\n  first type mismatch at position: 1\n  required type: var Thread[system.void]\n  but expression 't' is of type: Thread[ptr Channel[system.bool]]\n\nexpression: createThread(t, p, addr(cancelChan))\n{% endhighlight %}\nWhile the error is clear I just had a hard time reading it\n\n## The Hard \n\nI really considered switching to language with a more mature ecosystem for these points (multiple times) \n\n### Static linking\nNim promises `Produces dependency-free binaries` as stated on its website, but getting a static linked binary is hard, and undocumented process while it was one of the cases I hoped to use Nim for. \n\nI managed to statically link with PCRE and SSL [with lots of help from the community](https://github.com/kaushalmodi/hello_musl). \n\n### Dynamic linking\nBuilding on Mac OSX with SSL is no fun, specially when your SSL isn't 1.1 [I managed to do with lots of help from the community] \n\n{% highlight bash %}\nbrew install openssl@1.1\n\nnim c -d:ssl  --dynlibOverride:ssl --dynlibOverride:crypto --threads:on --passC:'-I/usr/local/opt/openssl\\@1.1/include/' --passL:'-lssl -lcrypto -lpcre' --passL:'-L/usr/local/opt/openssl\\@1.1/lib/' src/zos.nim\n{% endhighlight %}\n\n\n### Developing a redisclient\nWe have a redis protocol keyvalue store [0-db](https://github.com/threefoldtech/0-db) that I needed to work against a while ago, and I found a major [problem](https://github.com/nim-lang/redis/issues/11) with the implementation of the parser and the client in the official nim redis library. So I had to roll my own [parser](https://github.com/xmonader/nim-redisparser)/[client](https://github.com/xmonader/nim-redisclient) \n\n### Developing asciitable library \nTo show a table listing all of the containers (id, name, open ports and image it's running from) I needed an ascii table library in Nim (I found 0 libraries). I had to write my own [nim-asciitables](https://github.com/xmonader/nim-asciitables)\n\n\n### Nim-JWT \nIn the transport layer, we send a JWT token to request extra privileges on zero-os and for that, I needed jwt support. Again, jwt libraries are far from complete in Nim and had to try to fix it [ES384 support](https://github.com/yglukhov/nim-jwt/pull/1) with that fix I was able to get the claims, but I couldn't really verify it with the public key :( So I decided not to do client side validation and leave the validation to zero-os (the backend)\n\n### Concurrency and communication\nIn some parts of the application we want to add the ability to timeout after some period of time, and\nNim supports multithreading using `threadpool` and async/await combo and has [HTTPBeast](https://github.com/dom96/httpbeast), So that shouldn't be a problem.\n\nWhen I saw `Channels` and `spawn` I thought it'd be as easy as goroutines in Go or fibers in Crystal\n \nSo that was my first try with `spawn`\n\n{% highlight nim %}\nimport os, threadpool\n\nvar cancelChan: Channel[bool]\n\ncancelChan.open()\n\nproc p1():bool=\n    result = true\n    for i in countup(0,50):\n        echo \"p1 Doing action\"\n        sleep(1000)\n        let (hasData, msg) = cancelChan.tryRecv()\n        if msg == true:\n            echo \"Cancelling p1\"\n            return \n    echo \"Done p1...\"\n\nproc p2(): bool =\n    result = true\n    for i in countup(0,5):\n        echo \"p2 Doing action\"\n        sleep(1000)\n        let (hasData, msg) = cancelChan.tryRecv()\n        if msg == true:\n            echo \"Cancelling p1\"\n            return\n    echo \"Done p2\"\n\n\nproc timeoutable(p:proc, timeout=10)= \n    var t = (spawn p())\n    for i in countup(0, timeout):\n        if t.isReady():\n            return\n        sleep(1000)\n\n    cancelChan.send(true)\n\nwhen isMainModule:\n    timeoutable(p1)\n    timeoutable(p2)\n{% endhighlight %}\n\n\nHowever, The Nim creator `Andreas Rumpf` said using Spawn/Channels is a bad idea and channels are meant to be used with Threads, So I tried to move it to threads\n\n{% highlight nim %}\n\nimport os, threadpool\n\ntype Args = tuple[cancelChan:ptr Channel[bool], respChan: ptr Channel[bool]]\n\nproc p1(a: Args): void {.thread.}=\n    var cancelChan = a.cancelChan[]\n    var respChan = a.respChan[]\n    for i in countup(0,50):\n        let (hasData, msg) = cancelChan.tryRecv()\n        echo \"p1 HASDATA: \" & $hasData\n        echo \"p1 MSG: \" & $msg\n        if hasData == true:\n            echo \"Cancelling p1\"\n            respChan.send(false)\n            return \n        echo \"p1 Doing action\"\n        sleep(1000)\n\n    echo \"Done p1...\"\n    respChan.send(true)\n\nproc p2(a: Args): void {.thread.}=\n    var cancelChan = a.cancelChan[]\n    var respChan = a.respChan[]\n    for i in countup(0,5):\n        let (hasData, msg) = cancelChan.tryRecv()\n        echo \"p2 HASDATA: \" & $hasData\n        echo \"p2 MSG: \" & $msg\n        if hasData:\n            echo \"proc cancelled successfully\" \n            respChan.send(false)\n            return \n        echo \"p2 Doing action\"\n        sleep(1000)\n\n    echo \"Done p2...\"\n    respChan.send(true)\n\n\nproc timeoutable(p:proc, timeout=10): bool= \n\n    var cancelChan: Channel[bool]\n    var respChan: Channel[bool]\n    var t:  Thread[Args]\n    cancelChan.open()\n    respChan.open()\n    var args = (cancelChan.addr, respChan.addr) \n    createThread[Args](t, p, (args))\n\n    for i in countup(0, timeout):\n        let (hasData, msg) = respChan.tryRecv()\n        if hasData:\n            return msg \n        sleep(1000)\n\n    echo \"Cancelling proc..\"\n    cancelChan.send(true)\n    close(cancelChan)\n    close(respChan)\n\n    return false\n\nwhen isMainModule:\n    echo \"P1: \" & $timeoutable(p1)\n    echo \"P2: \" & $timeoutable(p2)\n{% endhighlight %}\n\n\nI'm not a fan of this `passing pointers`, `casting`, `.addr`\n\n\n### Macros\nMacros allow you to apply transformations on AST on compile time which is really amazing, but It can be very challenging to follow or even work with specially if it's not well documented and I feel they're kinda abused in the language resulting in half-baked libraries and macros playground.\n\n\n## Conclusion \nOverall, Nim is a language with a great potential, and its small team is doing an excellent job. Just be prepared to write lots of missing libraries if you want to use it in production. It's a great chance to reinvent the wheel with no one blaming you :) ", "content_with_meta": "---\nlayout: post\ntitle:  \"Nim: The good, the OK, and the hard\"\ndate:   2018-12-06 23:34:30 +0200\ncategories: nim\n---\n\n## Background\n\nI'm a software engineer at [ThreeFoldTech](https://threefold.io) and the author of [Nim Days](https://xmonader.github.io/nimdays)\n\nOne of the projects we develop at ThreeFoldTech is [Zero-OS](https://github.com/threefoldtech/0-core) a stateless Linux operating system designed for clustered deployments to host virtual machines and containerized applications.\nWe wanted to have a CLI (like docker) to manage the containers and communicate with zero-os instead of using Python client.\n\n\n## Application requirements\n- single binary\n- zos should be like docker for dockerd\n- commands to interact with zero-os (via redis)\n- subcommands to interact with containers on zero-os\n- documentation (soft documentation, hard documentation)\n- tabular output for humans (listing containers and such) \n- support json output when needed too (for further manipulation by tools like jq)\n\nSounds simple enough. Any language would do just fine\n\n\n## Choosing Nim\n\nFrom [Nim](https://nim-lang.org) website\n\n> Nim is a systems and applications programming language. Statically typed and compiled, it provides unparalleled performance in an elegant package.\n- High-performance garbage-collected language\n- Compiles to C, C++ or JavaScript\n- Produces dependency-free binaries\n- Runs on Windows, macOS, Linux, and more\n\n\n\nIn the upcoming sections, I'll talk about the good, the okay, and the hard points I faced while developing this simple CLI application with the requirements above.\n\n\n## The good\n\n### Static typing\nNim eliminates a whole class of errors by being statically typed\n\n### Expressiveness \nNim is like python (whitespace sensitive language) and there's even a guide on the official repo [Nim for Python programmers](https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers). Seeing some of Pascal concepts in Nim gets me very nostalgic too.\n\n{% highlight nim %}\nimport strutils, strformat, os, ospaths, osproc, tables, parsecfg, json, marshal, logging\nimport net, asyncdispatch, asyncnet, streams, threadpool, uri\nimport logging\nimport algorithm\nimport base64\n\nimport redisclient, redisparser\nimport asciitables\nimport docopt\nproc checkContainerExists*(this:App, containerid:int): bool=\n  ## checks if container `containerid` exists or not\n  try:\n    discard this.containerInfo(containerid)\n    result = true\n  except:\n    result = false\n{% endhighlight %}\n\n\nI find UFCS (Uniform Function Call Syntax) really great too [excellent nim basics](https://narimiran.github.io/nim-basics/)\n\n{% highlight nim %}\nproc plus(x, y: int): int =  # <1>\n  return x + y\n\nproc multi(x, y: int): int =\n  return x * y\n\nlet\n  a = 2\n  b = 3\n  c = 4\n\necho a.plus(b) == plus(a, b)\necho c.multi(a) == multi(c, a)\n\n\necho a.plus(b).multi(c)  # <2>\necho c.multi(b).plus(a)  # <3>\n{% endhighlight %}\n\nAlso case insensitivity `toUpper` `toupper` `to_upper` is pretty neat\n> I don't use the same identifier with different cases in the same scope \n\n\n{% highlight nim %}\ntype ContainerInfo* = object of RootObj\n  id*: string\n  cpu*: float\n  root*: string\n  hostname*: string\n  name*: string\n  storage*: string\n  pid*: int\n  ports*: string\n{% endhighlight %}\n\nI like the way of defining types, enums and access control `*` means public.\n\n\n### Developing sync, async in the same interface\n\n> Pragmas are Nim's method to give the compiler additional information/commands without introducing a massive number of new keywords. Pragmas are processed on the fly during semantic checking. Pragmas are enclosed in the special {. and .} curly brackets. Pragmas are also often used as a first implementation to play with a language feature before a nicer syntax to access the feature becomes available.\n\nI'm a fan of `multisync` pragma because it allows you to define procs for async, sync code easily\n\n{% highlight nim %}\n\n\nproc readMany(this:Redis|AsyncRedis, count:int=1): Future[string] {.multisync.} =\n  if count == 0:\n    return \"\"\n  let data = await this.receiveManaged(count)\n  return data\n\n{% endhighlight %}\nBasically in sync execution multisync will remove Future, and await from the code definition and will leave them in case of async execution\n\n### The tooling\n\n#### vscode-nim\n[vscode-nim](https://github.com/pragmagic/vscode-nim) is my daily driver, works as expected, but sometimes it consumes so much memory. there's also [LSP](https://github.com/PMunch/nimlsp) in the works \n\n#### nimble\nEverything you expect from the package manager, creating projects, custom tasks, managing dependencies and publishing (too coupled with github, but that's fine with me)\n\n\n#### Generating documentation\n[nim doc](https://nim-lang.org/docs/docgen.html) is the default tool in Nim to generate indexed and searchable documentation for the project\n\nHere's a nimble task to generate documentation\n{% highlight nim%}\ntask genDocs, \"Create code documentation for zos\":\n    exec \"nim doc --project src/zos.nim \"\n{% endhighlight %}\n\n\n{% highlight bash %}\nnim doc src/zos.nim \nHint: used config file '/home/xmonader/.choosenim/toolchains/nim-0.19.0/config/nim.cfg' [Conf]\nHint: used config file '/home/xmonader/.choosenim/toolchains/nim-0.19.0/config/nimdoc.cfg' [Conf]\nHint: system [Processing]\nHint: zos [Processing]\nHint: strutils [Processing]\nHint: parseutils [Processing]\nHint: math [Processing]\nHint: bitops [Processing]\nHint: algorithm [Processing]\nHint: unicode [Processing]\nHint: strformat [Processing]\nHint: macros [Processing]\nHint: os [Processing]\nHint: times [Processing]\nHint: options [Processing]\nHint: typetraits [Processing]\nHint: posix [Processing]\nHint: ospaths [Processing]\nHint: osproc [Processing]\nHint: strtabs [Processing]\nHint: hashes [Processing]\nHint: streams [Processing]\nHint: cpuinfo [Processing]\nHint: linux [Processing]\nHint: tables [Processing]\nHint: parsecfg [Processing]\nHint: lexbase [Processing]\nHint: json [Processing]\nHint: parsejson [Processing]\nHint: marshal [Processing]\nHint: typeinfo [Processing]\nHint: intsets [Processing]\nHint: logging [Processing]\nHint: net [Processing]\nHint: nativesockets [Processing]\nHint: winlean [Processing]\nHint: dynlib [Processing]\nHint: sets [Processing]\nHint: openssl [Processing]\nHint: asyncdispatch [Processing]\nHint: heapqueue [Processing]\nHint: lists [Processing]\nHint: asyncstreams [Processing]\nHint: asyncfutures [Processing]\nHint: deques [Processing]\nHint: cstrutils [Processing]\nHint: asyncnet [Processing]\nHint: threadpool [Processing]\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(13, 10) Error: Threadpool requires --threads:on option.\nHint: cpuload [Processing]\nHint: locks [Processing]\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 26) Error: undeclared identifier: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 31) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 31) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(67, 31) Error: expression 'fence' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(78, 8) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(78, 8) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(78, 8) Error: expression 'fence' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(81, 10) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(81, 10) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(81, 10) Error: expression 'fence' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(83, 10) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(83, 10) Error: attempting to call undeclared routine: 'fence'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(83, 10) Error: expression 'fence' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(360, 37) Error: undeclared identifier: 'Thread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(360, 43) Error: no generic parameters allowed for Thread\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(363, 54) Error: no generic parameters allowed for Thread\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 3) Error: undeclared identifier: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 15) Error: attempting to call undeclared routine: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 15) Error: attempting to call undeclared routine: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(391, 15) Error: expression 'createThread' cannot be called\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(404, 15) Error: attempting to call undeclared routine: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(404, 15) Error: attempting to call undeclared routine: 'createThread'\n../../../.choosenim/toolchains/nim-0.19.0/lib/pure/concurrency/threadpool.nim(404, 15) Error: expression 'createThread' cannot be called\nHint: uri [Processing]\nHint: base64 [Processing]\nHint: redisclient [Processing]\nHint: redisparser [Processing]\nHint: sequtils [Processing]\nHint: docopt [Processing]\nHint: nre [Processing]\nHint: pcre [Processing]\nHint: util [Processing]\nHint: util [Processing]\nHint: logger [Processing]\nHint: settings [Processing]\nHint: apphelp [Processing]\nHint: errorcodes [Processing]\nHint: sshexec [Processing]\nHint: hostnamegenerator [Processing]\nHint: random [Processing]\nHint: app [Processing]\nHint: asciitables [Processing]\nHint: zosclient [Processing]\nHint: uuids [Processing]\nHint: isaac [Processing]\nHint: urandom [Processing]\nHint: vbox [Processing]\n\n{% endhighlight %} \nNo idea why `generating docs` gives these errors (most likely because I'm using threadpool in my code?) so I went with my gut feeling and `--threads:on` \n{% highlight nim%}\ntask genDocs, \"Create code documentation for zos\":\n    exec \"nim doc  --threads:on --project src/zos.nim \"\n{% endhighlight %}\nand now it works just fine, and earned its place in the Good parts.\n\n\n## the OK\nThese are the OK parts that can be improved in my opinion\n\n### Documentation\nThere's a great community effort to provide [documentation](https://nim-lang.org/documentation.html). I hope we get more and more soft documentation and better quality on the official docs too.\n\n\n### Weird symbols / json\nNim chooses unreadable symbols `%*` and `$$` over clear names like dumps or loads :(\n\n### Error Messages\nSometimes the error messages aren't good enough. For instance, I got [i is not accessible](https://github.com/nim-lang/Nim/blob/27b081d1f77604ee47c886e69dbc52f53ea3741f/lib/system/chcks.nim#L21) and even with using `writeStackTrace` I couldn't get anything useful. So I grepped the codebase where `accessible` comes from and continued from there.\n\nAnother example was this \n{% highlight bash %}\ntimeddoutable.nim(44, 16) template/generic instantiation from here\ntimeddoutable.nim(34, 6) Error: type mismatch: got <Thread[ptr Channel[system.bool]], proc (cancelChan: ptr Channel[system.bool]):bool{.gcsafe, locks: 0.}, ptr Channel[system.bool]>\nbut expected one of:\nproc createThread[TArg](t: var Thread[TArg];\n                       tp: proc (arg: TArg) {.thread, nimcall.}; param: TArg)\n  first type mismatch at position: 2\n  required type: proc (arg: TArg){.gcsafe.}\n  but expression 'p' is of type: proc (cancelChan: ptr Channel[system.bool]): bool{.gcsafe, locks: 0.}\nproc createThread(t: var Thread[void]; tp: proc () {.thread, nimcall.})\n  first type mismatch at position: 1\n  required type: var Thread[system.void]\n  but expression 't' is of type: Thread[ptr Channel[system.bool]]\n\nexpression: createThread(t, p, addr(cancelChan))\n{% endhighlight %}\nWhile the error is clear I just had a hard time reading it\n\n## The Hard \n\nI really considered switching to language with a more mature ecosystem for these points (multiple times) \n\n### Static linking\nNim promises `Produces dependency-free binaries` as stated on its website, but getting a static linked binary is hard, and undocumented process while it was one of the cases I hoped to use Nim for. \n\nI managed to statically link with PCRE and SSL [with lots of help from the community](https://github.com/kaushalmodi/hello_musl). \n\n### Dynamic linking\nBuilding on Mac OSX with SSL is no fun, specially when your SSL isn't 1.1 [I managed to do with lots of help from the community] \n\n{% highlight bash %}\nbrew install openssl@1.1\n\nnim c -d:ssl  --dynlibOverride:ssl --dynlibOverride:crypto --threads:on --passC:'-I/usr/local/opt/openssl\\@1.1/include/' --passL:'-lssl -lcrypto -lpcre' --passL:'-L/usr/local/opt/openssl\\@1.1/lib/' src/zos.nim\n{% endhighlight %}\n\n\n### Developing a redisclient\nWe have a redis protocol keyvalue store [0-db](https://github.com/threefoldtech/0-db) that I needed to work against a while ago, and I found a major [problem](https://github.com/nim-lang/redis/issues/11) with the implementation of the parser and the client in the official nim redis library. So I had to roll my own [parser](https://github.com/xmonader/nim-redisparser)/[client](https://github.com/xmonader/nim-redisclient) \n\n### Developing asciitable library \nTo show a table listing all of the containers (id, name, open ports and image it's running from) I needed an ascii table library in Nim (I found 0 libraries). I had to write my own [nim-asciitables](https://github.com/xmonader/nim-asciitables)\n\n\n### Nim-JWT \nIn the transport layer, we send a JWT token to request extra privileges on zero-os and for that, I needed jwt support. Again, jwt libraries are far from complete in Nim and had to try to fix it [ES384 support](https://github.com/yglukhov/nim-jwt/pull/1) with that fix I was able to get the claims, but I couldn't really verify it with the public key :( So I decided not to do client side validation and leave the validation to zero-os (the backend)\n\n### Concurrency and communication\nIn some parts of the application we want to add the ability to timeout after some period of time, and\nNim supports multithreading using `threadpool` and async/await combo and has [HTTPBeast](https://github.com/dom96/httpbeast), So that shouldn't be a problem.\n\nWhen I saw `Channels` and `spawn` I thought it'd be as easy as goroutines in Go or fibers in Crystal\n \nSo that was my first try with `spawn`\n\n{% highlight nim %}\nimport os, threadpool\n\nvar cancelChan: Channel[bool]\n\ncancelChan.open()\n\nproc p1():bool=\n    result = true\n    for i in countup(0,50):\n        echo \"p1 Doing action\"\n        sleep(1000)\n        let (hasData, msg) = cancelChan.tryRecv()\n        if msg == true:\n            echo \"Cancelling p1\"\n            return \n    echo \"Done p1...\"\n\nproc p2(): bool =\n    result = true\n    for i in countup(0,5):\n        echo \"p2 Doing action\"\n        sleep(1000)\n        let (hasData, msg) = cancelChan.tryRecv()\n        if msg == true:\n            echo \"Cancelling p1\"\n            return\n    echo \"Done p2\"\n\n\nproc timeoutable(p:proc, timeout=10)= \n    var t = (spawn p())\n    for i in countup(0, timeout):\n        if t.isReady():\n            return\n        sleep(1000)\n\n    cancelChan.send(true)\n\nwhen isMainModule:\n    timeoutable(p1)\n    timeoutable(p2)\n{% endhighlight %}\n\n\nHowever, The Nim creator `Andreas Rumpf` said using Spawn/Channels is a bad idea and channels are meant to be used with Threads, So I tried to move it to threads\n\n{% highlight nim %}\n\nimport os, threadpool\n\ntype Args = tuple[cancelChan:ptr Channel[bool], respChan: ptr Channel[bool]]\n\nproc p1(a: Args): void {.thread.}=\n    var cancelChan = a.cancelChan[]\n    var respChan = a.respChan[]\n    for i in countup(0,50):\n        let (hasData, msg) = cancelChan.tryRecv()\n        echo \"p1 HASDATA: \" & $hasData\n        echo \"p1 MSG: \" & $msg\n        if hasData == true:\n            echo \"Cancelling p1\"\n            respChan.send(false)\n            return \n        echo \"p1 Doing action\"\n        sleep(1000)\n\n    echo \"Done p1...\"\n    respChan.send(true)\n\nproc p2(a: Args): void {.thread.}=\n    var cancelChan = a.cancelChan[]\n    var respChan = a.respChan[]\n    for i in countup(0,5):\n        let (hasData, msg) = cancelChan.tryRecv()\n        echo \"p2 HASDATA: \" & $hasData\n        echo \"p2 MSG: \" & $msg\n        if hasData:\n            echo \"proc cancelled successfully\" \n            respChan.send(false)\n            return \n        echo \"p2 Doing action\"\n        sleep(1000)\n\n    echo \"Done p2...\"\n    respChan.send(true)\n\n\nproc timeoutable(p:proc, timeout=10): bool= \n\n    var cancelChan: Channel[bool]\n    var respChan: Channel[bool]\n    var t:  Thread[Args]\n    cancelChan.open()\n    respChan.open()\n    var args = (cancelChan.addr, respChan.addr) \n    createThread[Args](t, p, (args))\n\n    for i in countup(0, timeout):\n        let (hasData, msg) = respChan.tryRecv()\n        if hasData:\n            return msg \n        sleep(1000)\n\n    echo \"Cancelling proc..\"\n    cancelChan.send(true)\n    close(cancelChan)\n    close(respChan)\n\n    return false\n\nwhen isMainModule:\n    echo \"P1: \" & $timeoutable(p1)\n    echo \"P2: \" & $timeoutable(p2)\n{% endhighlight %}\n\n\nI'm not a fan of this `passing pointers`, `casting`, `.addr`\n\n\n### Macros\nMacros allow you to apply transformations on AST on compile time which is really amazing, but It can be very challenging to follow or even work with specially if it's not well documented and I feel they're kinda abused in the language resulting in half-baked libraries and macros playground.\n\n\n## Conclusion \nOverall, Nim is a language with a great potential, and its small team is doing an excellent job. Just be prepared to write lots of missing libraries if you want to use it in production. It's a great chance to reinvent the wheel with no one blaming you :) ", "tags":[], "published_at": "2019-8-21", "id": 8}, {"author_name":"xmonader", "author_email":"xmonader@gmail.com","author_image":"me.jpg","title": "Launching the 2018 Nim Community Survey", "slug": "community-survey-2018", "content": "\nWe are proud to announce the launch of the official\n[2018 Nim Community Survey](https://goo.gl/forms/t2gWWBEDC1walw6s2)! No matter\nwhether you use Nim today, have used Nim previously, or never used Nim before;\nwe want to know your opinions.\nYour feedback will help the Nim project understand its strengths and\nweaknesses, and to determine development priorities for the future.\n\n<div style=\"text-align: center;\">\n  <a class=\"pure-button pure-button-primary\" style=\"font-size: 85%; display: inline-block;\" href=\"https://goo.gl/forms/t2gWWBEDC1walw6s2\" target=\"_blank\">\n  Answer Survey\n  </a>\n</div>\n\nIt shouldn't take you much longer than 5 to 10 minutes to complete this survey.\nSubmissions will be accepted until around the 23rd of July, depending on the\nresponse rates. If you have any questions or feedback, please don't hesitate\nto get in touch with us via email at survey@nim-lang.org or on the\n[Nim Forum](http://forum.nim-lang.org).\n\nThis is now the third year in which this survey has been running. An analysis of\nthe results for the past years can be found at the following links:\n\n* [2016](https://nim-lang.org/blog/2016/09/03/community-survey-results-2016.html)\n* [2017](https://nim-lang.org/blog/2017/10/01/community-survey-results-2017.html)\n\nWe would appreciate your help in spreading the word about this survey. Share\nthe Google Forms link on your social network feeds, with your colleagues and in\nother communities.\n\nThank you to everyone that helped develop and test the survey! Once the\nsubmission period ends, the results will be shown here and publicised via\nTwitter, the Nim Forum and IRC.\n\nThanks for your time!", "content_with_meta": "---\ntitle: \"Launching the 2018 Nim Community Survey\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nWe are proud to announce the launch of the official\n[2018 Nim Community Survey](https://goo.gl/forms/t2gWWBEDC1walw6s2)! No matter\nwhether you use Nim today, have used Nim previously, or never used Nim before;\nwe want to know your opinions.\nYour feedback will help the Nim project understand its strengths and\nweaknesses, and to determine development priorities for the future.\n\n<div style=\"text-align: center;\">\n  <a class=\"pure-button pure-button-primary\" style=\"font-size: 85%; display: inline-block;\" href=\"https://goo.gl/forms/t2gWWBEDC1walw6s2\" target=\"_blank\">\n  Answer Survey\n  </a>\n</div>\n\nIt shouldn't take you much longer than 5 to 10 minutes to complete this survey.\nSubmissions will be accepted until around the 23rd of July, depending on the\nresponse rates. If you have any questions or feedback, please don't hesitate\nto get in touch with us via email at survey@nim-lang.org or on the\n[Nim Forum](http://forum.nim-lang.org).\n\nThis is now the third year in which this survey has been running. An analysis of\nthe results for the past years can be found at the following links:\n\n* [2016](https://nim-lang.org/blog/2016/09/03/community-survey-results-2016.html)\n* [2017](https://nim-lang.org/blog/2017/10/01/community-survey-results-2017.html)\n\nWe would appreciate your help in spreading the word about this survey. Share\nthe Google Forms link on your social network feeds, with your colleagues and in\nother communities.\n\nThank you to everyone that helped develop and test the survey! Once the\nsubmission period ends, the results will be shown here and publicised via\nTwitter, the Nim Forum and IRC.\n\nThanks for your time!\n", "tags": ["nim", "python"], "published_at": "2019-9-21", "id": 9}, {"author_name":"xmonader", "author_email":"xmonader@gmail.com","author_image":"me.jpg","title": "Nim Community Survey 2018 Results", "slug": "community-survey-results-2018", "content": "\nWe have recently closed the 2018 Nim Community Survey. I am happy to\nsay that we have received exactly 771 responses, huge thanks to all the people\nthat took the time to respond. We're incredibly thankful for this very valuable\nfeedback.\n\nFor the results of the previous year's survey, take a look at the\n[2017 results analysis](https://nim-lang.org/blog/2017/10/01/community-survey-results-2017.html).\n\nOur survey ran from the 23rd of June 2018 until the 31st of July 2018.\nThe goal of this survey was primarily to determine how our community is using\nNim, in order to better understand how we should be improving it. In particular,\nwe wanted to know what people feel is missing from Nim in the lead up to\nversion 1.0. We have also asked our respondents about how well the Nim tools\nworked, the challenges of adopting Nim, the resources that they used to learn\nNim and more.\n\nThis article goes through some of the highlights in the results for the survey\nand discusses them in the context of the previous year's results. The aim is to\nunderstand our users and to figure out priorities for Nim's future.\n\nThis time around I have decided to publish the Google Survey results\npage, for some this may be more interesting than reading the highlights.\nIt's available here: [https://i.imgur.com/g7slQ8w.png](https://i.imgur.com/g7slQ8w.png).\n\n# Changes since the last survey\n\nThe questions in this survey were largely the same as last year's,\nbut there were some key changes. In particular, the following questions were\nadded:\n\n* How do you learn about the new functionality added to Nim?\n* Should Nim 1.0 have been released already?\n\nThe following questions were removed:\n\n* Which direction should Nim’s GC/memory management take?\n* What domain do you work in currently?\n* What domain do you use Nim in?\n\nThe following questions were modified:\n\n* \"How did you install Nim?\" was changed to \"How did you most recently install Nim?\"\n* What improvements are needed before Nim v1.0 can be released?\n  * This question was streamlined into a single long form question.\n\nThe \"What critical libraries are missing in the Nim ecosystem?\" and\n\"What development tools, if any, can make you more productive when working with Nim?\"\nquestions were merged into\n\"What features, tools, or libraries would you like Nim to have?\"\n\nWe wanted to gain deeper knowledge of our contributor's experiences, so\na brand new section titled \"Contributor questions\" was introduced.\n\n# Do you use Nim?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/do_you_use_nim.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/do_you_use_nim.png\" alt=\"Do you use Nim?\" style=\"width:100%\"/>\n</a>\n\nLike last year the respondents were split up into three groups:\n\n* Current users of Nim\n* Ex-Nim users\n* Those that never used Nim\n\nThis enabled each group to be targeted with specific questions.\nFor example, ex-Nim users were asked why they've stopped using Nim.\n\nThis year the proportion of responses from current Nim users has grown\nfrom 43% to 47%. This is a slight increase in the proportion of Nim users\nanswering the survey, but it's important to note that the absolute number\nwent up by over 100 users from last year.\n\n# How could we help make Nim more accepted at your company?\n\nThis was a free-form question so there were many different answers, but a few\nanswers were very common. By far the most common request was \"version 1.0.\"\n\nOther honourable mentions include \"more documentation\", \"more stability\" and\n\"Free balloons\". These mostly align well with the general wishes of our\ncommunity so you will see similar answers in later questions as well.\n\n# What editor(s) do you use when writing Nim?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/editors_used.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/editors_used.png\" alt=\"Editors used by Nim users\" style=\"width:60%\"/>\n</a>\n\nVisual Studio Code continues its dominance and has become even more dominant\nsince the last survey. 51% of respondents selected Visual Studio Code, whereas\nonly 35.5% selected it last year.\n\n# What is your experience with the following tools?\n\nThis questions gives a good idea about how popular Nim tools are and whether\nusing them is enjoyable.\n\nThe most popular tool, as one might expect, is Nimble. The Nimble package\nmanager also boasts a high like rating, with over 75% of respondents answering\neither \"Like\" or \"Extreme Like\" for Nimble.\n\nThe most unpopular tool is nimpretty, with 75% of respondents answering that\nthey haven't used it.\n\nThe most disliked tool is nimsuggest, although it is only disliked by 6% of the\nrespondents.\n\n# How did you most recently install Nim?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/recent_install.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/recent_install.png\" alt=\"How did you most recently install Nim?\" style=\"width:60%\"/>\n</a>\n\nChoosenim takes the crown as the most popular installation method, but only just\nbarely. Other installation methods are also very popular.\n\n# Top reasons why programmers stopped using Nim\n\nThe reasons given vary widely which makes their analysis challenging. In order\nto make it easier to see the reasons at a high level, I went through and grouped\nthem into generic categories.\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/leave_reasons.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/leave_reasons.png\" alt=\"Why did you stop using Nim?\" style=\"width:80%\"/>\n</a>\n\nThis offers some good insight into why programmers have stopped using Nim.\n\nThe number one reason is Nim's relative lack of maturity, many\nrespondents have quoted this as the\nreason why they have stopped using Nim. In most cases the respondents simply\nwant 1.0 to be released. Together with maturity, multiple respondents also\nmentioned a general lack of libraries and Nim's small ecosystem. These respondents\nwere all counted under the \"Maturity\" category.\nThe \"Missing library\" category mostly counts respondents who\nmentioned a specific library that was missing. This category could\nhave easily been merged into the \"Maturity\" category but wasn't for greater detail.\n\nThe second reason, categorised as \"Not sufficiently better than other languages\",\nwas mostly the respondent specifying that they are happy with another language,\nor that their project is more suited to another language.\n\nStability was the third reason. For this category, the respondents mostly\ntalked about the stability of Nim as a whole. In many cases this meant tools\nsuch as IDEs not working properly rather than the compiler being buggy, although\nthe latter was prevalent as well.\n\n# Top reasons why programmers are not using Nim\n\nThis is similar to the previous section, but it focuses on respondents who\ndo not use Nim. As previously these vary widely so they have been put into\ncategories.\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/not_using_reasons.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/not_using_reasons.png\" alt=\"Why aren't you using Nim?\" style=\"width:80%\"/>\n</a>\n\nNote that this is based on the long-form question which was asked in\naddition to the multiple choice question.\n\nIt seems that the number one reason why respondents are not using Nim is\nbecause they do not see the value in it. Many of the respondents didn't see\na reason why learning Nim was worthwhile. This is reflected in the number 1\ncategory: \"Not sufficiently better than other languages\".\n\nLack of time is of course a big factor too and in many cases it ties in\nwith respondents not seeing value in learning Nim.\n\nNim's relative immaturity was another strong theme among the responses.\n\nAn interesting number of respondents specified that they simply didn't have\na project, or couldn't come up with a project to write in Nim. It may be worth\nexposing newcomers to some project ideas to alleviate this.\n\n# Do you feel well informed in the direction that the Nim project is heading?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/nim_future_heading_informed_feeling.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/nim_future_heading_informed_feeling.png\" alt=\"Do you feel well informed in the direction that the Nim project is heading?\" style=\"width:60%\"/>\n</a>\n\nThis question was asked last year to gauge how well we are informing users\nabout where the Nim project is heading. In comparison to last year, the\nproportion of respondents answering \"Yes\" has increased to 25.8% from 23.5%.\nThis is positive but we should do better, while it is an increase it is\nrelatively minor. We should look into further ways to inform our community of\nour roadmap and other plans for the future.\n\n# Should Nim 1.0 have been released already?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/release_nim_1_now.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/release_nim_1_now.png\" alt=\"Should Nim 1.0 have been released already?\" style=\"width:60%\"/>\n</a>\n\nThis is a new question, it's aim is to gauge the feeling in the community around\nwhether a stable 1.0 release of Nim should have been made already.\n\nRight now, the results are fairly even and thus it's hard to know what to take\naway from them.\n\n# What improvements are needed before Nim v1.0 can be released?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/needed_for_1.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/needed_for_1.png\" alt=\"What improvements are needed before Nim v1.0 can be released??\" style=\"width:80%\"/>\n</a>\n\nThe chart above shows the general trends of what respondents felt was needed\nfor Nim v1.0 to be released.\n\nIt was surprising to see so many respondents mentioning destructors, it\nseems that many people are excited about this feature and want it to be\nincluded in v1.0 of Nim.\n\nThe top three improvements though were, in order, \"Better Docs\", \"Stabilization\"\nand finally \"Better Stdlib\".\n\nFor the first one, respondents generally asked for\nmore polished documentation but a significant portion of them also asked for\nvideo tutorials. Many felt that video tutorials were a good way to learn a\nprogramming language, we have already\n[created some live streams](https://nim-lang.org/blog/2017/12/28/nim-in-2017-a-short-recap.html#nim-livestreams)\nwhere we coded\nNim projects but it is obvious that we need to do more. In particular,\nwe should:\n\n* Create more video tutorial material\n* Ensure that our video tutorials are accessible to all and easy to find\n* Improve the general written documentation, both in its presentation but also\n  in the amount of content available\n\nFor the second one, respondents generally asked for a more reliable experience\nwith all language features. A reduction of compiler crashes and surprising\nbehaviour was among the top wishes.\n\nFinally for the \"Better Stdlib\" responses, many of them asked for a cleanup\nof the standard library. In particular the removal of deprecated functions but\nalso the migration of some modules to a separate repository available via\nthe Nimble package manager.\n\n## Last words\n\nThank you to each and every one of you who took the time to answer this survey.\nYour time is precious and we are deeply thankful that you used it to share your\nfeedback.\n\nPlease remember that you do not need to wait for a survey in order to give us\nfeedback, of course you're more than welcome to wait if you wish, but ideally\nshare your feedback with us immediately. We can be found in various different\nplaces, see the community page for links and instructions on how to get in touch:\nhttps://nim-lang.org/community.html.\n\nIf there are any questions about this survey I'm more than happy to answer them.\nFeel free to reach out to me on the community channels linked above.\n\nThanks for reading, and have a good day!", "content_with_meta": "---\ntitle: \"Nim Community Survey 2018 Results\"\nauthor: Dominik Picheta\ntags: nim, python\n---\n\nWe have recently closed the 2018 Nim Community Survey. I am happy to\nsay that we have received exactly 771 responses, huge thanks to all the people\nthat took the time to respond. We're incredibly thankful for this very valuable\nfeedback.\n\nFor the results of the previous year's survey, take a look at the\n[2017 results analysis](https://nim-lang.org/blog/2017/10/01/community-survey-results-2017.html).\n\nOur survey ran from the 23rd of June 2018 until the 31st of July 2018.\nThe goal of this survey was primarily to determine how our community is using\nNim, in order to better understand how we should be improving it. In particular,\nwe wanted to know what people feel is missing from Nim in the lead up to\nversion 1.0. We have also asked our respondents about how well the Nim tools\nworked, the challenges of adopting Nim, the resources that they used to learn\nNim and more.\n\nThis article goes through some of the highlights in the results for the survey\nand discusses them in the context of the previous year's results. The aim is to\nunderstand our users and to figure out priorities for Nim's future.\n\nThis time around I have decided to publish the Google Survey results\npage, for some this may be more interesting than reading the highlights.\nIt's available here: [https://i.imgur.com/g7slQ8w.png](https://i.imgur.com/g7slQ8w.png).\n\n# Changes since the last survey\n\nThe questions in this survey were largely the same as last year's,\nbut there were some key changes. In particular, the following questions were\nadded:\n\n* How do you learn about the new functionality added to Nim?\n* Should Nim 1.0 have been released already?\n\nThe following questions were removed:\n\n* Which direction should Nim’s GC/memory management take?\n* What domain do you work in currently?\n* What domain do you use Nim in?\n\nThe following questions were modified:\n\n* \"How did you install Nim?\" was changed to \"How did you most recently install Nim?\"\n* What improvements are needed before Nim v1.0 can be released?\n  * This question was streamlined into a single long form question.\n\nThe \"What critical libraries are missing in the Nim ecosystem?\" and\n\"What development tools, if any, can make you more productive when working with Nim?\"\nquestions were merged into\n\"What features, tools, or libraries would you like Nim to have?\"\n\nWe wanted to gain deeper knowledge of our contributor's experiences, so\na brand new section titled \"Contributor questions\" was introduced.\n\n# Do you use Nim?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/do_you_use_nim.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/do_you_use_nim.png\" alt=\"Do you use Nim?\" style=\"width:100%\"/>\n</a>\n\nLike last year the respondents were split up into three groups:\n\n* Current users of Nim\n* Ex-Nim users\n* Those that never used Nim\n\nThis enabled each group to be targeted with specific questions.\nFor example, ex-Nim users were asked why they've stopped using Nim.\n\nThis year the proportion of responses from current Nim users has grown\nfrom 43% to 47%. This is a slight increase in the proportion of Nim users\nanswering the survey, but it's important to note that the absolute number\nwent up by over 100 users from last year.\n\n# How could we help make Nim more accepted at your company?\n\nThis was a free-form question so there were many different answers, but a few\nanswers were very common. By far the most common request was \"version 1.0.\"\n\nOther honourable mentions include \"more documentation\", \"more stability\" and\n\"Free balloons\". These mostly align well with the general wishes of our\ncommunity so you will see similar answers in later questions as well.\n\n# What editor(s) do you use when writing Nim?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/editors_used.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/editors_used.png\" alt=\"Editors used by Nim users\" style=\"width:60%\"/>\n</a>\n\nVisual Studio Code continues its dominance and has become even more dominant\nsince the last survey. 51% of respondents selected Visual Studio Code, whereas\nonly 35.5% selected it last year.\n\n# What is your experience with the following tools?\n\nThis questions gives a good idea about how popular Nim tools are and whether\nusing them is enjoyable.\n\nThe most popular tool, as one might expect, is Nimble. The Nimble package\nmanager also boasts a high like rating, with over 75% of respondents answering\neither \"Like\" or \"Extreme Like\" for Nimble.\n\nThe most unpopular tool is nimpretty, with 75% of respondents answering that\nthey haven't used it.\n\nThe most disliked tool is nimsuggest, although it is only disliked by 6% of the\nrespondents.\n\n# How did you most recently install Nim?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/recent_install.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/recent_install.png\" alt=\"How did you most recently install Nim?\" style=\"width:60%\"/>\n</a>\n\nChoosenim takes the crown as the most popular installation method, but only just\nbarely. Other installation methods are also very popular.\n\n# Top reasons why programmers stopped using Nim\n\nThe reasons given vary widely which makes their analysis challenging. In order\nto make it easier to see the reasons at a high level, I went through and grouped\nthem into generic categories.\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/leave_reasons.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/leave_reasons.png\" alt=\"Why did you stop using Nim?\" style=\"width:80%\"/>\n</a>\n\nThis offers some good insight into why programmers have stopped using Nim.\n\nThe number one reason is Nim's relative lack of maturity, many\nrespondents have quoted this as the\nreason why they have stopped using Nim. In most cases the respondents simply\nwant 1.0 to be released. Together with maturity, multiple respondents also\nmentioned a general lack of libraries and Nim's small ecosystem. These respondents\nwere all counted under the \"Maturity\" category.\nThe \"Missing library\" category mostly counts respondents who\nmentioned a specific library that was missing. This category could\nhave easily been merged into the \"Maturity\" category but wasn't for greater detail.\n\nThe second reason, categorised as \"Not sufficiently better than other languages\",\nwas mostly the respondent specifying that they are happy with another language,\nor that their project is more suited to another language.\n\nStability was the third reason. For this category, the respondents mostly\ntalked about the stability of Nim as a whole. In many cases this meant tools\nsuch as IDEs not working properly rather than the compiler being buggy, although\nthe latter was prevalent as well.\n\n# Top reasons why programmers are not using Nim\n\nThis is similar to the previous section, but it focuses on respondents who\ndo not use Nim. As previously these vary widely so they have been put into\ncategories.\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/not_using_reasons.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/not_using_reasons.png\" alt=\"Why aren't you using Nim?\" style=\"width:80%\"/>\n</a>\n\nNote that this is based on the long-form question which was asked in\naddition to the multiple choice question.\n\nIt seems that the number one reason why respondents are not using Nim is\nbecause they do not see the value in it. Many of the respondents didn't see\na reason why learning Nim was worthwhile. This is reflected in the number 1\ncategory: \"Not sufficiently better than other languages\".\n\nLack of time is of course a big factor too and in many cases it ties in\nwith respondents not seeing value in learning Nim.\n\nNim's relative immaturity was another strong theme among the responses.\n\nAn interesting number of respondents specified that they simply didn't have\na project, or couldn't come up with a project to write in Nim. It may be worth\nexposing newcomers to some project ideas to alleviate this.\n\n# Do you feel well informed in the direction that the Nim project is heading?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/nim_future_heading_informed_feeling.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/nim_future_heading_informed_feeling.png\" alt=\"Do you feel well informed in the direction that the Nim project is heading?\" style=\"width:60%\"/>\n</a>\n\nThis question was asked last year to gauge how well we are informing users\nabout where the Nim project is heading. In comparison to last year, the\nproportion of respondents answering \"Yes\" has increased to 25.8% from 23.5%.\nThis is positive but we should do better, while it is an increase it is\nrelatively minor. We should look into further ways to inform our community of\nour roadmap and other plans for the future.\n\n# Should Nim 1.0 have been released already?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/release_nim_1_now.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/release_nim_1_now.png\" alt=\"Should Nim 1.0 have been released already?\" style=\"width:60%\"/>\n</a>\n\nThis is a new question, it's aim is to gauge the feeling in the community around\nwhether a stable 1.0 release of Nim should have been made already.\n\nRight now, the results are fairly even and thus it's hard to know what to take\naway from them.\n\n# What improvements are needed before Nim v1.0 can be released?\n\n<a href=\"{{site.baseurl}}/assets/news/images/survey2018/needed_for_1.png\">\n  <img src=\"{{site.baseurl}}/assets/news/images/survey2018/needed_for_1.png\" alt=\"What improvements are needed before Nim v1.0 can be released??\" style=\"width:80%\"/>\n</a>\n\nThe chart above shows the general trends of what respondents felt was needed\nfor Nim v1.0 to be released.\n\nIt was surprising to see so many respondents mentioning destructors, it\nseems that many people are excited about this feature and want it to be\nincluded in v1.0 of Nim.\n\nThe top three improvements though were, in order, \"Better Docs\", \"Stabilization\"\nand finally \"Better Stdlib\".\n\nFor the first one, respondents generally asked for\nmore polished documentation but a significant portion of them also asked for\nvideo tutorials. Many felt that video tutorials were a good way to learn a\nprogramming language, we have already\n[created some live streams](https://nim-lang.org/blog/2017/12/28/nim-in-2017-a-short-recap.html#nim-livestreams)\nwhere we coded\nNim projects but it is obvious that we need to do more. In particular,\nwe should:\n\n* Create more video tutorial material\n* Ensure that our video tutorials are accessible to all and easy to find\n* Improve the general written documentation, both in its presentation but also\n  in the amount of content available\n\nFor the second one, respondents generally asked for a more reliable experience\nwith all language features. A reduction of compiler crashes and surprising\nbehaviour was among the top wishes.\n\nFinally for the \"Better Stdlib\" responses, many of them asked for a cleanup\nof the standard library. In particular the removal of deprecated functions but\nalso the migration of some modules to a separate repository available via\nthe Nimble package manager.\n\n## Last words\n\nThank you to each and every one of you who took the time to answer this survey.\nYour time is precious and we are deeply thankful that you used it to share your\nfeedback.\n\nPlease remember that you do not need to wait for a survey in order to give us\nfeedback, of course you're more than welcome to wait if you wish, but ideally\nshare your feedback with us immediately. We can be found in various different\nplaces, see the community page for links and instructions on how to get in touch:\nhttps://nim-lang.org/community.html.\n\nIf there are any questions about this survey I'm more than happy to answer them.\nFeel free to reach out to me on the community channels linked above.\n\nThanks for reading, and have a good day!\n", "tags": ["nim", "python"], "published_at": "2019-6-21", "id": 10}, {"author_name":"xmonader", "author_email":"xmonader@gmail.com","author_image":"me.jpg", "post_image": "https://camo.githubusercontent.com/60bbbdf4fe36938bee8b1ead8268a206bc504ee9/687474703a2f2f7777772e7377692d70726f6c6f672e6f72672f69636f6e732f737769706c2e706e67", "title": "Solving murder with Prolog", "slug": "solving-murder-prolog", "content": "\nIn our company we usually have a fun quiz every sunday and this was one of them\n\n## The puzzle\n\nTo discover who killed Mr. Boddy, you need to learn where each person was, and what weapon was in the room. Clues are scattered throughout the quiz (you cannot solve question 1 until all 10 are read).\n\n- To begin, you need to know the suspects. There are three men (George, John, Robert) and three women (Barbara, Christine, Yolanda). Each person was in a different room (Bathroom, Dining Room, Kitchen, Living Room, Pantry, Study). A suspected weapon was found in each room (Bag, Firearm, Gas, Knife, Poison, Rope).\nWho was found in the kitchen?\n\n- Clue 1: The man in the kitchen was not found with the rope, knife, or bag.\nWhich weapon, then, which was not the firearm, was found in the kitchen?\n\n- Clue 2: Barbara was either in the study or the bathroom; Yolanda was in the other.\nWhich room was Barbara found in?\n\n- Clue 3: The person with the bag, who was not Barbara nor George, was not in the bathroom nor the dining room.\nWho had the bag in the room with them?\n\n- Clue 4: The woman with the rope was found in the study.\nWho had the rope?\n\n- Clue 5: The weapon in the living room was found with either John or George.\nWhat weapon was in the living room?\n\n- Clue 6: The knife was not in the dining room.\nSo where was the knife?\n\n- Clue 7: Yolanda was not with the weapon found in the study nor the pantry.\nWhat weapon was found with Yolanda?\n\n- Clue 8: The firearm was in the room with George.\nIn which room was the firearm found?\n\n- It was discovered that Mr. Boddy was gassed in the pantry. The suspect found in that room was the murderer.\nWho, then, do you point the finger towards?\n\n\nI suck at these kind of puzzles (actually most of the puzzles), and those can take hours and hours of thinking, but there's always Prolog to the rescue! Prolog can help solving these kinds of reasoning puzzles and we will see how.\n\n\n## prolog 101\n\n### Install SWI-Prolog\n```prolog\n~> swipl\nWelcome to SWI-Prolog (Multi-threaded, 64 bits, Version 6.6.6)\nCopyright (c) 1990-2013 University of Amsterdam, VU Amsterdam\nSWI-Prolog comes with ABSOLUTELY NO WARRANTY. This is free software,\nand you are welcome to redistribute it under certain conditions.\nPlease visit http://www.swi-prolog.org for details.\n \nFor help, use ?- help(Topic). or ?- apropos(Word).\n \n?- write('Hello, World!').\nHello, World!\ntrue.\n?- write('Hello,'), nl, write('world').\nHello,\nworld\ntrue.\n?- X is 3*4 + 2.\nX = 14.\n```\n- `swipl` is our prolog interpreter binary\n- `write` is called a `functor` and represented as `write/1` means it takes 1 argument. (same concept in erlang or elixir to add the number of arguments to the function name)\n- `nl` used to print newline\n- to execute sequence of commands you use `,` which is the AND operator also if it fails the whole computation fails\n- `is` assginment operator followed by math expression\n- variables are Capitalized `X` not x\n\n### Knowledge base\nProlog is all about stating facts, composing facts and querying them. \n\ncreate a file `hello.pl`\n\n```prolog\nfriend(john, julia).\nfriend(john, jack).\nfriend(julia, sam).\nfriend(julia, molly).\n \nloves(john, julia).\nloves(julia, sam).\nloves(sam, julia).\n \nmale(brad).\nmale(john).\nmale(jim).\nmale(alfred).\nfemale(marry).\nchild(brad, alfred).\nchild(john, jim).\nchild(john, marry).\n```\n\n- to load it we use `[hello].` : notice the . in the end\n- use `listing` to list all the facts in the knowledge base\n\n```prolog\n?- [hello].\n% hello compiled 0.00 sec, 3 clauses\ntrue.\n \n?- listing(friend).\nfriend(john, julia).\nfriend(john, jack).\nfriend(julia, sam).\nfriend(julia, molly).\n \ntrue.\n \n?- listing(loves).\nloves(john, julia).\nloves(julia, sam).\nloves(sam, julia).\n \ntrue.\n```\t\n\n### Querying the facts\nAfter stating the facts in our knowledge base we can go ahead and ask prolog about the truth or what it can deduce from the facts we gave it.\n```prolog\n?- friend(john, julia).\ntrue .\n \n?- friend(john, jack).\ntrue.\n \n?- loves(john, julia).\ntrue.\n \n?- loves(john, sam).\nfalse.\n```\n\nWe can go for more complex queries like asking (Who is friend with john or Who loves julia)\n```prolog\n?- friend(john, Who).\nWho = julia ;\nWho = jack.\n```\n\n```prolog\n?- listing(child).\nchild(brad, alfred).\nchild(john, jim).\nchild(john, mary).\n \ntrue.\n \n?- child(john, X).\nX = jim ;\nX = mary.\n```\n\n### Is John friendzoned?\nWe defined `friend` relation `friend(john, julia)` It says `john is friend with julia`, but for prolog that doesn't mean `julia is friend with john` you need to add another fact saying  `friend(julia, john)`, also we already defined the `child` relations, for sure we don't want to duplicate it again and flip the arguments to define `parent` relations. We don't want to write\n```\nchild(brad, alfred).\nchild(john, jim).\nchild(john, mary).\n\nparent(alfred, brad).\nparent(jim, john).\nparent(mary, john).\n```\nProlog helps by allowing inference rules. \n\n`rule :- stmt1, stmt2,...`\n\nrule is true if all of the inner statements are true (ANDed together with `,`)\n\n\n```prolog\nfriend(X, Y) :- friend(Y,X).\nparent(X, Y) :- child(Y,X).\nfather(X, Y) :- child(Y,X), male(X).\nmother(X, Y) :- child(Y,X), female(X).\nfriendzoned(X) :- loves(X, Y), \\+ loves(Y,X).\n\n```\n- `friend(X,Y)` is a rule that is true if also `friend(Y,X`)\n- `parent(X,Y)` is true if `child(Y,X)` is defined \n- `father(X,Y)` is true if `parent(X,Y)` and `male(X)` are defined\n- `mother(X,Y)` is true if `parent(X,Y)` and `female(X)` are defined.\n- `friendzoned(X)` is true if X loves `SOMEONE Y` and that Y doesn't love X (notice the hidden variable Y?)\n\n\n```prolog\n?- friend(julia, john).\ntrue .\n?- male(jim).\ntrue.\n \n?- parent(jim,X).\nX = john.\n \n?- father(jim, X).\nX = john.\n \n?- mother(X, john).\nX = marry.\n \n?- mother(marry,X).\nX = john.\n \n?- mother(marry, john).\ntrue.\n\n?- loves(julia, X).\nX = sam.\n \n?- friendzoned(julia).\nfalse.\n \n?- friendzoned(john).\ntrue.\n```\n\nOK now we know enough prolog to be dangerous. we will warm up with map coloring problem\n\n## Map coloring\nFirst we will start with solving a map coloring problem. A famous problem in mathematics concerns coloring regions on the maps. it is required that any two adjacent regions may not have the same color.\n\n![Map](https://ai.ia.agh.edu.pl/wiki/_media/pl:prolog:prolog_lab:map_coloring.png?cache=&w=640&h=400&tok=8ffff3)\n\nSo our reasoning should be, we have \n1- Variables: areas we want to color A,B,C,D,E\n2- Domain: the range of values that can be assigned to our variables) and that would be (red, blue, green)\n3- Stating the constraints that no adjacent areas can have the same color.\n\n### Domain\n\nLet's define the domain of our Areas (red, green, blue)\n\n```prolog\n\ncolor(red).\ncolor(green).\ncolor(blue).\n\n```\nJust like that\n\n### Asking for solution\n\n```prolog\n\n\ncolorify(A,B,C,D,E) :-\n   \n    color(A), color(B), color(C), color(D), color(E),\n    \\+ A=B, \\+ A=C, \\+ A=D, \\+ A=E,\n    \\+ B=C, \\+ C=D, \\+ D=E.\n```\nHere we define our solution as a rule `colorify` that has 5 `variables` A,B,C,D,E and in the body we assign the domain color `red, blue, green` to our variables `A,B,C,D,E` and state the constraints that A not equal to B an A not equal to C, ... etc\n> `\\+ X=Y` means X is not equal to Y\n\nProlog now will keep generating values like (red, blue, green) and assigns them our variables `A,B,C,D,E` until our constraints are met \n\n```bash\n?- [mapcoloring]\n|    .\ntrue.\n\n?- colorify(A,B,C,D,E)\n|    .\nA = red,\nB = D, D = green,\nC = E, E = blue ;\nA = red,\nB = D, D = blue,\nC = E, E = green ;\nA = green,\nB = D, D = red,\nC = E, E = blue ;\nA = green,\nB = D, D = blue,\nC = E, E = red ;\nA = blue,\nB = D, D = red,\nC = E, E = green ;\nA = blue,\nB = D, D = green,\nC = E, E = red \n\n```\n\n\n```prolog\ncolor(red).\ncolor(green).\ncolor(blue).\n\ncolorify(A,B,C,D,E) :-\n    color(A), color(B), color(C), color(D), color(E),\n    \\+ A=B, \\+ A=C, \\+ A=D, \\+ A=E,\n    \\+ B=C, \\+ C=D, \\+ D=E.\n```\n\nbut we aren't here to solve map coloring.. let's get back to the murder.\n\n## The murder\n\nTo begin, you need to know the suspects. There are three men (George, John, Robert) and three women (Barbara, Christine, Yolanda). Each person was in a different room (Bathroom, Dining Room, Kitchen, Living Room, Pantry, Study). A suspected weapon was found in each room (Bag, Firearm, Gas, Knife, Poison, Rope).\n\nWho was found in the kitchen?\n\n### Domain\n\nFrom that we can infer that our domains contains `man`, `woman` `person` or suspect, `location` and `weapons` and our variables are (A,B,C,D,E,F) need to represent (a Person and a location and a weapon) with some constraints that will be revealed in the upcoming clues\n\n\n```prolog\n\nman(george). man(john). man(robert).\nwoman(barbara). woman(christine). woman(yolanda).\nperson(X):- man(X).\nperson(X):- woman(X).\nlocation(bathroom). location(dining). location(kitchen). location(livingroom). location(pantry). location(study).\nweapon(bag). weapon(firearm). weapon(gas). weapon(knife). weapon(poison). weapon(rope).\n```\n\n`uniq_ppl` rule generates unique values for our variables (A,B,C,D,E) such that they are all unique.\n\n```prolog\nuniq_ppl(A,B,C,D,E,F):- person(A), person(B), person(C), person(D), person(E), person(F),  \\+A=B, \\+A=C, \\+A=D, \\+A=E, \\+A=F, \\+B=C, \\+B=D, \\+B=E, \\+B=F, \\+C=D, \\+C=E, \\+C=F, \\+D=E, \\+D=F, \\+E=F.\n\n```\n\n\n### Solution\n\nWe start by defining `murderer` rule with unique people `in locations` and unique people `having weapons` and now will specify the relation between the people in the locations with those having weapons\n\n> Note we are still working against 6 suspects.\n\n#### Entry\n```prolog\nmurderer(X) :-\n   uniq_ppl(Bathroom, Dining, Kitchen, Livingroom, Pantry, Study),\n   uniq_ppl(Bag, Firearm, Gas, Knife, Poison, Rope),\n```\nTo easily reason about the variables like `Bathroom, Dining, Firearm, Gas` we say \n- Bathroom: the suspect (man or woman) in Bathroom\n- Firearm: the suspect (man or woman) has a Firearm\n.. etc, you can also think of it as a [grid](https://docs.google.com/spreadsheets/d/1pxmVaG6eMbkVg55rVYJquIVxaN3l09nrW6HJH7xdITM/edit#gid=0) \n\nnow we will keep adding constraints `after the last comma in our murderer rule`\n\n#### Clue 1\n\nThe man in the kitchen was not found with the rope, knife, or bag. Which weapon, then, which was not the firearm, was found in the kitchen?\n\n```prolog\n% 2. Clue 1: The man in the kitchen was not found with the rope, knife, or bag.\n% Which weapon, then, which was not the firearm, was found in the kitchen?\n\n   man(Kitchen), \n   \\+Kitchen=Rope, \\+Kitchen=Knife, \\+Kitchen=Bag, \\+Kitchen=Firearm,\n```\nSo we say the one the `Kitchen` is variable satisfying `man` fact (defined in our domain) and we state that whoever `man` in the `Kitchen` doesn't have any of (`Rope`, `Knife`, `Bag`, `Firearm`)\n\n\n#### Clue 2\n\nClue 2: Barbara was either in the study or the bathroom; Yolanda was in the other.\nWhich room was Barbara found in?\n\nSo we can say it was a `woman` in the `Study` and a `woman` in the `Bathroom` AND it wasn't `christine` and we cross the other options for `Barbara` (Kitchen, Dining, Livingroom, Pantry)\n\n```prolog\n% % 3. Clue 2: Barbara was either in the study or the bathroom; Yolanda was in the other.\n% % Which room was Barbara found in?\n    woman(Bathroom), woman(Study), \\+christine=Bathroom, \\+christine=Study, \n    \\+barbara=Dining, \\+barbara=Kitchen, \\+barbara=Livingroom, \\+barbara=Pantry,\n```\n\n#### Clue 3\nClue 3: The person with the bag, who was not barbara nor George, was not in the bathroom nor the dining room.\n% % Who had the bag in the room with them?\n\n```prolog\n% % 4. Clue 3: The person with the bag, who was not Barbara nor George, was not in the bathroom nor the dining room.\n% % Who had the bag in the room with them?\n\n    \\+barbara=Bag, \\+george=Bag, \\+Bag=Bathroom, \\+Bag=Dining,\n   \n   \n   \n```\n- `Barbara` not the one with bag \n- `george` isn't the one with the bag\n- the one with the `Bag` isn't the one in the Bathroom AND isn't the one in the `Dining`\n\n> Edit: thanks to the nice people on reddit corrected the misinterpretation I had for clue no.3\n\n#### Clue 4\nClue 4: The woman with the rope was found in the study.Who had the rope?\n\n- The one with the `Rope` is `woman`\n- She was found in the `Study`   \n```prolog\n% % 5. Clue 4: The woman with the rope was found in the study.\n% % Who had the rope?\n   \n    woman(Rope), Rope=Study,  \n```\n\n\n#### Clue 5\nClue 5: The weapon in the living room was found with either John or George. What weapon was in the living room?\n\n\n- `man` in `Livingroom`\n- `Livingroom` isn't `robert`\n\n\n```prolog\n% % 6. Clue 5: The weapon in the living room was found with either John or George.\n% % What weapon was in the living room?\n    man(Livingroom), \\+Livingroom=robert,\n\n```\n#### Clue 6\nClue 6: The knife was not in the dining room.So where was the knife?\n\n\n```prolog\n% % 7. Clue 6: The knife was not in the dining room.\n% % So where was the knife?\n    \\+Knife=Dining,\n```\n- the suspect with `Knife` wasn't in `Dining`\n\n\n#### Clue 7\n Clue 7: Yolanda was not with the weapon found in the study nor the pantry. What weapon was found with Yolanda?\n\n```prolog\n% % 8. Clue 7: Yolanda was not with the weapon found in the study nor the pantry.\n% % What weapon was found with Yolanda?\n    \\+yolanda=Pantry, \\+yolanda=Study,\n```\n- `yolanda` isn't the one in `Pantry` \n- `yolanda` isn't the one in `Study` \n\n#### Clue 8\n\n```prolog\n% % 9. Clue 8: The firearm was in the room with George.\n% % In which room was the firearm found?\n    Firearm=george,\n\n```\n- `george` is the perrson with the `Firearm`\n\n#### Clue 9\n\n```prolog\n% % 10. It was discovered that Mr. Boddy was gassed in the pantry. The suspect found in that room was the murderer.\n% % Who, then, do you point the finger towards?\nPantry=Gas, Pantry=X, write(\"KILLER IS :\"), write(X), nl, writeanswers(Bathroom, Dining, Kitchen, Livingroom, Pantry, Study, Bag, Firearm, Gas, Knife, Poison, Rope).\n```\n- `Gas` in `Pantry` so those are equal\n- `Pantry` has the murderer X\n- we write the murderer X name using `write`\n- we write the the variables `Bathroom, Dining, Kitchen, Livingroom, Pantry, Study, Bag, Firearm, Gas, Knife, Poison, Rope` using `writeanswers` which is defined like so\n```prolog\nwriteanswers(Bathroom, Dining, Kitchen, Livingroom, Pantry, Study, Bag, Firearm, Gas, Knife, Poison, Rope):- \n    write(\"Bathroom: \"), write(Bathroom), nl,\n    write(\"Dining: \"), write(Dining), nl,\n    write(\"Livingroom: \"), write(Livingroom), nl, \n    write(\"Pantry: \"), write(Pantry), nl,\n    write(\"Study: \"), write(Study), nl,\n    write(\"Kitchen: \"), write(Kitchen), nl,\n\n    write(\"Knife: \"), write(Knife), nl,\n    write(\"Gas: \"), write(Gas), nl,\n    write(\"Rope: \"), write(Rope), nl, \n    write(\"Bag: \"), write(Bag), nl,\n    write(\"Poison: \"), write(Poison), nl,\n    write(\"Firearm: \"), write(Firearm), nl.\n ```\t\t\n\n\n### Who is the murderer?\n\n ```bash\n ?- [crime2].\ntrue.\n?- murderer(X).\nKILLER IS :christine\nBathroom: yolanda\nDining: george\nLivingroom: john\nPantry: christine\nStudy: barbara\nKitchen: robert\nKnife: yolanda\nGas: christine\nRope: barbara\nBag: john\nPoison: robert\nFirearm: george\nX = christine ;\n\n```\n\nCode is available [here](https://github.com/xmonader/prolog-rands/blob/master/crime.pl) probably can be much better as I'm no expert in prolog :) ", "content_with_meta": "---\nlayout: post\ntitle:  \"Solving murder with Prolog\"\ndate:   2018-12-22 01:17:30 +0200\ncategories: prolog\n---\n\nIn our company we usually have a fun quiz every sunday and this was one of them\n\n## The puzzle\n\nTo discover who killed Mr. Boddy, you need to learn where each person was, and what weapon was in the room. Clues are scattered throughout the quiz (you cannot solve question 1 until all 10 are read).\n\n- To begin, you need to know the suspects. There are three men (George, John, Robert) and three women (Barbara, Christine, Yolanda). Each person was in a different room (Bathroom, Dining Room, Kitchen, Living Room, Pantry, Study). A suspected weapon was found in each room (Bag, Firearm, Gas, Knife, Poison, Rope).\nWho was found in the kitchen?\n\n- Clue 1: The man in the kitchen was not found with the rope, knife, or bag.\nWhich weapon, then, which was not the firearm, was found in the kitchen?\n\n- Clue 2: Barbara was either in the study or the bathroom; Yolanda was in the other.\nWhich room was Barbara found in?\n\n- Clue 3: The person with the bag, who was not Barbara nor George, was not in the bathroom nor the dining room.\nWho had the bag in the room with them?\n\n- Clue 4: The woman with the rope was found in the study.\nWho had the rope?\n\n- Clue 5: The weapon in the living room was found with either John or George.\nWhat weapon was in the living room?\n\n- Clue 6: The knife was not in the dining room.\nSo where was the knife?\n\n- Clue 7: Yolanda was not with the weapon found in the study nor the pantry.\nWhat weapon was found with Yolanda?\n\n- Clue 8: The firearm was in the room with George.\nIn which room was the firearm found?\n\n- It was discovered that Mr. Boddy was gassed in the pantry. The suspect found in that room was the murderer.\nWho, then, do you point the finger towards?\n\n\nI suck at these kind of puzzles (actually most of the puzzles), and those can take hours and hours of thinking, but there's always Prolog to the rescue! Prolog can help solving these kinds of reasoning puzzles and we will see how.\n\n\n## prolog 101\n\n### Install SWI-Prolog\n```prolog\n~> swipl\nWelcome to SWI-Prolog (Multi-threaded, 64 bits, Version 6.6.6)\nCopyright (c) 1990-2013 University of Amsterdam, VU Amsterdam\nSWI-Prolog comes with ABSOLUTELY NO WARRANTY. This is free software,\nand you are welcome to redistribute it under certain conditions.\nPlease visit http://www.swi-prolog.org for details.\n \nFor help, use ?- help(Topic). or ?- apropos(Word).\n \n?- write('Hello, World!').\nHello, World!\ntrue.\n?- write('Hello,'), nl, write('world').\nHello,\nworld\ntrue.\n?- X is 3*4 + 2.\nX = 14.\n```\n- `swipl` is our prolog interpreter binary\n- `write` is called a `functor` and represented as `write/1` means it takes 1 argument. (same concept in erlang or elixir to add the number of arguments to the function name)\n- `nl` used to print newline\n- to execute sequence of commands you use `,` which is the AND operator also if it fails the whole computation fails\n- `is` assginment operator followed by math expression\n- variables are Capitalized `X` not x\n\n### Knowledge base\nProlog is all about stating facts, composing facts and querying them. \n\ncreate a file `hello.pl`\n\n```prolog\nfriend(john, julia).\nfriend(john, jack).\nfriend(julia, sam).\nfriend(julia, molly).\n \nloves(john, julia).\nloves(julia, sam).\nloves(sam, julia).\n \nmale(brad).\nmale(john).\nmale(jim).\nmale(alfred).\nfemale(marry).\nchild(brad, alfred).\nchild(john, jim).\nchild(john, marry).\n```\n\n- to load it we use `[hello].` : notice the . in the end\n- use `listing` to list all the facts in the knowledge base\n\n```prolog\n?- [hello].\n% hello compiled 0.00 sec, 3 clauses\ntrue.\n \n?- listing(friend).\nfriend(john, julia).\nfriend(john, jack).\nfriend(julia, sam).\nfriend(julia, molly).\n \ntrue.\n \n?- listing(loves).\nloves(john, julia).\nloves(julia, sam).\nloves(sam, julia).\n \ntrue.\n```\t\n\n### Querying the facts\nAfter stating the facts in our knowledge base we can go ahead and ask prolog about the truth or what it can deduce from the facts we gave it.\n```prolog\n?- friend(john, julia).\ntrue .\n \n?- friend(john, jack).\ntrue.\n \n?- loves(john, julia).\ntrue.\n \n?- loves(john, sam).\nfalse.\n```\n\nWe can go for more complex queries like asking (Who is friend with john or Who loves julia)\n```prolog\n?- friend(john, Who).\nWho = julia ;\nWho = jack.\n```\n\n```prolog\n?- listing(child).\nchild(brad, alfred).\nchild(john, jim).\nchild(john, mary).\n \ntrue.\n \n?- child(john, X).\nX = jim ;\nX = mary.\n```\n\n### Is John friendzoned?\nWe defined `friend` relation `friend(john, julia)` It says `john is friend with julia`, but for prolog that doesn't mean `julia is friend with john` you need to add another fact saying  `friend(julia, john)`, also we already defined the `child` relations, for sure we don't want to duplicate it again and flip the arguments to define `parent` relations. We don't want to write\n```\nchild(brad, alfred).\nchild(john, jim).\nchild(john, mary).\n\nparent(alfred, brad).\nparent(jim, john).\nparent(mary, john).\n```\nProlog helps by allowing inference rules. \n\n`rule :- stmt1, stmt2,...`\n\nrule is true if all of the inner statements are true (ANDed together with `,`)\n\n\n```prolog\nfriend(X, Y) :- friend(Y,X).\nparent(X, Y) :- child(Y,X).\nfather(X, Y) :- child(Y,X), male(X).\nmother(X, Y) :- child(Y,X), female(X).\nfriendzoned(X) :- loves(X, Y), \\+ loves(Y,X).\n\n```\n- `friend(X,Y)` is a rule that is true if also `friend(Y,X`)\n- `parent(X,Y)` is true if `child(Y,X)` is defined \n- `father(X,Y)` is true if `parent(X,Y)` and `male(X)` are defined\n- `mother(X,Y)` is true if `parent(X,Y)` and `female(X)` are defined.\n- `friendzoned(X)` is true if X loves `SOMEONE Y` and that Y doesn't love X (notice the hidden variable Y?)\n\n\n```prolog\n?- friend(julia, john).\ntrue .\n?- male(jim).\ntrue.\n \n?- parent(jim,X).\nX = john.\n \n?- father(jim, X).\nX = john.\n \n?- mother(X, john).\nX = marry.\n \n?- mother(marry,X).\nX = john.\n \n?- mother(marry, john).\ntrue.\n\n?- loves(julia, X).\nX = sam.\n \n?- friendzoned(julia).\nfalse.\n \n?- friendzoned(john).\ntrue.\n```\n\nOK now we know enough prolog to be dangerous. we will warm up with map coloring problem\n\n## Map coloring\nFirst we will start with solving a map coloring problem. A famous problem in mathematics concerns coloring regions on the maps. it is required that any two adjacent regions may not have the same color.\n\n![Map](https://ai.ia.agh.edu.pl/wiki/_media/pl:prolog:prolog_lab:map_coloring.png?cache=&w=640&h=400&tok=8ffff3)\n\nSo our reasoning should be, we have \n1- Variables: areas we want to color A,B,C,D,E\n2- Domain: the range of values that can be assigned to our variables) and that would be (red, blue, green)\n3- Stating the constraints that no adjacent areas can have the same color.\n\n### Domain\n\nLet's define the domain of our Areas (red, green, blue)\n\n```prolog\n\ncolor(red).\ncolor(green).\ncolor(blue).\n\n```\nJust like that\n\n### Asking for solution\n\n```prolog\n\n\ncolorify(A,B,C,D,E) :-\n   \n    color(A), color(B), color(C), color(D), color(E),\n    \\+ A=B, \\+ A=C, \\+ A=D, \\+ A=E,\n    \\+ B=C, \\+ C=D, \\+ D=E.\n```\nHere we define our solution as a rule `colorify` that has 5 `variables` A,B,C,D,E and in the body we assign the domain color `red, blue, green` to our variables `A,B,C,D,E` and state the constraints that A not equal to B an A not equal to C, ... etc\n> `\\+ X=Y` means X is not equal to Y\n\nProlog now will keep generating values like (red, blue, green) and assigns them our variables `A,B,C,D,E` until our constraints are met \n\n```bash\n?- [mapcoloring]\n|    .\ntrue.\n\n?- colorify(A,B,C,D,E)\n|    .\nA = red,\nB = D, D = green,\nC = E, E = blue ;\nA = red,\nB = D, D = blue,\nC = E, E = green ;\nA = green,\nB = D, D = red,\nC = E, E = blue ;\nA = green,\nB = D, D = blue,\nC = E, E = red ;\nA = blue,\nB = D, D = red,\nC = E, E = green ;\nA = blue,\nB = D, D = green,\nC = E, E = red \n\n```\n\n\n```prolog\ncolor(red).\ncolor(green).\ncolor(blue).\n\ncolorify(A,B,C,D,E) :-\n    color(A), color(B), color(C), color(D), color(E),\n    \\+ A=B, \\+ A=C, \\+ A=D, \\+ A=E,\n    \\+ B=C, \\+ C=D, \\+ D=E.\n```\n\nbut we aren't here to solve map coloring.. let's get back to the murder.\n\n## The murder\n\nTo begin, you need to know the suspects. There are three men (George, John, Robert) and three women (Barbara, Christine, Yolanda). Each person was in a different room (Bathroom, Dining Room, Kitchen, Living Room, Pantry, Study). A suspected weapon was found in each room (Bag, Firearm, Gas, Knife, Poison, Rope).\n\nWho was found in the kitchen?\n\n### Domain\n\nFrom that we can infer that our domains contains `man`, `woman` `person` or suspect, `location` and `weapons` and our variables are (A,B,C,D,E,F) need to represent (a Person and a location and a weapon) with some constraints that will be revealed in the upcoming clues\n\n\n```prolog\n\nman(george). man(john). man(robert).\nwoman(barbara). woman(christine). woman(yolanda).\nperson(X):- man(X).\nperson(X):- woman(X).\nlocation(bathroom). location(dining). location(kitchen). location(livingroom). location(pantry). location(study).\nweapon(bag). weapon(firearm). weapon(gas). weapon(knife). weapon(poison). weapon(rope).\n```\n\n`uniq_ppl` rule generates unique values for our variables (A,B,C,D,E) such that they are all unique.\n\n```prolog\nuniq_ppl(A,B,C,D,E,F):- person(A), person(B), person(C), person(D), person(E), person(F),  \\+A=B, \\+A=C, \\+A=D, \\+A=E, \\+A=F, \\+B=C, \\+B=D, \\+B=E, \\+B=F, \\+C=D, \\+C=E, \\+C=F, \\+D=E, \\+D=F, \\+E=F.\n\n```\n\n\n### Solution\n\nWe start by defining `murderer` rule with unique people `in locations` and unique people `having weapons` and now will specify the relation between the people in the locations with those having weapons\n\n> Note we are still working against 6 suspects.\n\n#### Entry\n```prolog\nmurderer(X) :-\n   uniq_ppl(Bathroom, Dining, Kitchen, Livingroom, Pantry, Study),\n   uniq_ppl(Bag, Firearm, Gas, Knife, Poison, Rope),\n```\nTo easily reason about the variables like `Bathroom, Dining, Firearm, Gas` we say \n- Bathroom: the suspect (man or woman) in Bathroom\n- Firearm: the suspect (man or woman) has a Firearm\n.. etc, you can also think of it as a [grid](https://docs.google.com/spreadsheets/d/1pxmVaG6eMbkVg55rVYJquIVxaN3l09nrW6HJH7xdITM/edit#gid=0) \n\nnow we will keep adding constraints `after the last comma in our murderer rule`\n\n#### Clue 1\n\nThe man in the kitchen was not found with the rope, knife, or bag. Which weapon, then, which was not the firearm, was found in the kitchen?\n\n```prolog\n% 2. Clue 1: The man in the kitchen was not found with the rope, knife, or bag.\n% Which weapon, then, which was not the firearm, was found in the kitchen?\n\n   man(Kitchen), \n   \\+Kitchen=Rope, \\+Kitchen=Knife, \\+Kitchen=Bag, \\+Kitchen=Firearm,\n```\nSo we say the one the `Kitchen` is variable satisfying `man` fact (defined in our domain) and we state that whoever `man` in the `Kitchen` doesn't have any of (`Rope`, `Knife`, `Bag`, `Firearm`)\n\n\n#### Clue 2\n\nClue 2: Barbara was either in the study or the bathroom; Yolanda was in the other.\nWhich room was Barbara found in?\n\nSo we can say it was a `woman` in the `Study` and a `woman` in the `Bathroom` AND it wasn't `christine` and we cross the other options for `Barbara` (Kitchen, Dining, Livingroom, Pantry)\n\n```prolog\n% % 3. Clue 2: Barbara was either in the study or the bathroom; Yolanda was in the other.\n% % Which room was Barbara found in?\n    woman(Bathroom), woman(Study), \\+christine=Bathroom, \\+christine=Study, \n    \\+barbara=Dining, \\+barbara=Kitchen, \\+barbara=Livingroom, \\+barbara=Pantry,\n```\n\n#### Clue 3\nClue 3: The person with the bag, who was not barbara nor George, was not in the bathroom nor the dining room.\n% % Who had the bag in the room with them?\n\n```prolog\n% % 4. Clue 3: The person with the bag, who was not Barbara nor George, was not in the bathroom nor the dining room.\n% % Who had the bag in the room with them?\n\n    \\+barbara=Bag, \\+george=Bag, \\+Bag=Bathroom, \\+Bag=Dining,\n   \n   \n   \n```\n- `Barbara` not the one with bag \n- `george` isn't the one with the bag\n- the one with the `Bag` isn't the one in the Bathroom AND isn't the one in the `Dining`\n\n> Edit: thanks to the nice people on reddit corrected the misinterpretation I had for clue no.3\n\n#### Clue 4\nClue 4: The woman with the rope was found in the study.Who had the rope?\n\n- The one with the `Rope` is `woman`\n- She was found in the `Study`   \n```prolog\n% % 5. Clue 4: The woman with the rope was found in the study.\n% % Who had the rope?\n   \n    woman(Rope), Rope=Study,  \n```\n\n\n#### Clue 5\nClue 5: The weapon in the living room was found with either John or George. What weapon was in the living room?\n\n\n- `man` in `Livingroom`\n- `Livingroom` isn't `robert`\n\n\n```prolog\n% % 6. Clue 5: The weapon in the living room was found with either John or George.\n% % What weapon was in the living room?\n    man(Livingroom), \\+Livingroom=robert,\n\n```\n#### Clue 6\nClue 6: The knife was not in the dining room.So where was the knife?\n\n\n```prolog\n% % 7. Clue 6: The knife was not in the dining room.\n% % So where was the knife?\n    \\+Knife=Dining,\n```\n- the suspect with `Knife` wasn't in `Dining`\n\n\n#### Clue 7\n Clue 7: Yolanda was not with the weapon found in the study nor the pantry. What weapon was found with Yolanda?\n\n```prolog\n% % 8. Clue 7: Yolanda was not with the weapon found in the study nor the pantry.\n% % What weapon was found with Yolanda?\n    \\+yolanda=Pantry, \\+yolanda=Study,\n```\n- `yolanda` isn't the one in `Pantry` \n- `yolanda` isn't the one in `Study` \n\n#### Clue 8\n\n```prolog\n% % 9. Clue 8: The firearm was in the room with George.\n% % In which room was the firearm found?\n    Firearm=george,\n\n```\n- `george` is the perrson with the `Firearm`\n\n#### Clue 9\n\n```prolog\n% % 10. It was discovered that Mr. Boddy was gassed in the pantry. The suspect found in that room was the murderer.\n% % Who, then, do you point the finger towards?\nPantry=Gas, Pantry=X, write(\"KILLER IS :\"), write(X), nl, writeanswers(Bathroom, Dining, Kitchen, Livingroom, Pantry, Study, Bag, Firearm, Gas, Knife, Poison, Rope).\n```\n- `Gas` in `Pantry` so those are equal\n- `Pantry` has the murderer X\n- we write the murderer X name using `write`\n- we write the the variables `Bathroom, Dining, Kitchen, Livingroom, Pantry, Study, Bag, Firearm, Gas, Knife, Poison, Rope` using `writeanswers` which is defined like so\n```prolog\nwriteanswers(Bathroom, Dining, Kitchen, Livingroom, Pantry, Study, Bag, Firearm, Gas, Knife, Poison, Rope):- \n    write(\"Bathroom: \"), write(Bathroom), nl,\n    write(\"Dining: \"), write(Dining), nl,\n    write(\"Livingroom: \"), write(Livingroom), nl, \n    write(\"Pantry: \"), write(Pantry), nl,\n    write(\"Study: \"), write(Study), nl,\n    write(\"Kitchen: \"), write(Kitchen), nl,\n\n    write(\"Knife: \"), write(Knife), nl,\n    write(\"Gas: \"), write(Gas), nl,\n    write(\"Rope: \"), write(Rope), nl, \n    write(\"Bag: \"), write(Bag), nl,\n    write(\"Poison: \"), write(Poison), nl,\n    write(\"Firearm: \"), write(Firearm), nl.\n ```\t\t\n\n\n### Who is the murderer?\n\n ```bash\n ?- [crime2].\ntrue.\n?- murderer(X).\nKILLER IS :christine\nBathroom: yolanda\nDining: george\nLivingroom: john\nPantry: christine\nStudy: barbara\nKitchen: robert\nKnife: yolanda\nGas: christine\nRope: barbara\nBag: john\nPoison: robert\nFirearm: george\nX = christine ;\n\n```\n\nCode is available [here](https://github.com/xmonader/prolog-rands/blob/master/crime.pl) probably can be much better as I'm no expert in prolog :) ", "tags":[], "published_at": "2019-10-21", "id": 11}, {"author_name":"xmonader", "author_email":"xmonader@gmail.com","author_image":"me.jpg","title": "Version 0.19.0 released", "slug": "version-released", "content": "\nThe Nim team is happy to announce that the latest release of Nim,\nversion 0.19.0, is now available. Nim is a systems programming language that\nfocuses on performance, portability and expressiveness.\n\n# Installing 0.19.0\n\nIf you have installed a previous version of Nim using ``choosenim``,\ngetting Nim 0.19.0 is as easy as:\n\n```bash\n$ choosenim update stable\n```\n\nIf you don't have it already, you can get ``choosenim`` by following\n[these instructions](https://github.com/dom96/choosenim) or you can install\nNim by following the instructions on our\n[install](https://nim-lang.org/install.html) page.\n\n\n# What's new in 0.19.0\n\nThe ``nil`` state for strings/seqs is gone. Instead the default value for\nthese is ``\"\" / @[]``. Use ``--nilseqs:on`` for a transition period. This\neliminates a large class of bugs that used to plague the average Nim code\nout there, including Nim's standard library.\n\nAccessing the binary zero terminator in Nim's native strings\nis now invalid. Internally a Nim string still has the trailing zero for\nzero-copy interoperability with ``cstring``. Compile your code with the\nnew switch ``--laxStrings:on`` if you need a transition period.\n\nThese changes to strings and seqs give us more flexibility in how they\nare implemented and indeed alternative implementations are in development.\n\n``experimental`` is now a pragma and a command line switch that can enable\nspecific language extensions, it is not an all-or-nothing switch anymore.\nWe think this leads to a more robust development process where it's clearly\ndocumented which parts of Nim are bleeding edge and which parts can be relied\nupon.\n\nOther notable language additions:\n\n- Dot calls combined with explicit generic instantiations can now be written\n  as ``x.y[:z]`` which is transformed into ``y[z](x)`` by the parser.\n- ``func`` is now an alias for ``proc {.noSideEffect.}``.\n- Anonymous tuples with a single element can now be written as ``(1,)`` with a\n  trailing comma.\n\n- In order to make ``for`` loops and iterators more flexible to use Nim now\n  supports so called \"for-loop macros\". See\n  the [manual](https://nim-lang.org/docs/manual.html#macros-for-loop-macros) for more details.\n  This feature enables a Python-like generic ``enumerate`` implementation.\n\n- Case statements can now be rewritten via macros. See the [manual](https://nim-lang.org/docs/manual.html#macros-case-statement-macros) for more information.\n  This feature enables custom pattern matching.\n\n- The command syntax now supports keyword arguments after the first comma.\n\n- Thread-local variables can now be declared inside procs. This implies all\n  the effects of the ``global`` pragma.\n\n- Nim now supports the ``except`` clause in the ``export`` statement.\n\n- Range float types, example ``range[0.0 .. Inf]``. More details in language manual.\n\n\n## Breaking changes to be mindful of\n\n- The default location of ``nimcache`` for the native code targets was\n  changed. Read [the compiler user guide](https://nim-lang.org/docs/nimc.html#generated-c-code-directory)\n  for more information.\n- Lots of deprecated symbols in the standard library that have been deprecated for\n  quite some time now like ``system.expr`` or the old type aliases starting with a ``T``\n  or ``P`` prefix have been removed.\n- The exception hierarchy was slightly reworked, ``SystemError`` was renamed to\n  ``CatchableError`` and is the new base class for any exception that is guaranteed to\n  be catchable. This change should have minimal impact on most existing Nim code.\n\n\n## Async improvements\n\nThe \"closure iterators\" that Nim's ``async`` macro is based on has been\nrewritten from the ground up and so ``async`` works completely with\nexception handling. Finally it is possible to use ``await`` in a ``try``\nstatement!\n\n\n## Nimble 0.9.0\n\nThis release includes a brand new version of Nimble. The new version\ncontains a breaking change which you should read up on if you own\nhybrid packages. There are also the usual bug fixes and this release\ncontains a lot of them.\n\nFor more information, see the\n[Nimble v0.9.0 changelog](https://github.com/nim-lang/nimble/blob/master/changelog.markdown#090---19092018).\n\n## Contributors to v0.19.0\n\nOur contributors are amazing, and there is\n[far too many](https://github.com/nim-lang/Nim/graphs/contributors) to list\nhere. Big thanks to all of you, we couldn't have pulled off this release\nwithout you!\n\n# Changelog\n\n## Changes affecting backwards compatibility\n\n### Breaking changes in the standard library\n\n- ``re.split`` for empty regular expressions now yields every character in\n  the string which is what other programming languages chose to do.\n- The returned tuple of ``system.instantiationInfo`` now has a third field\n  containing the column of the instantiation.\n\n- ``cookies.setCookie`` no longer assumes UTC for the expiration date.\n- ``strutils.formatEng`` does not distinguish between ``nil`` and ``\"\"``\n  strings anymore for its ``unit`` parameter. Instead the space is controlled\n  by a new parameter ``useUnitSpace``.\n\n- The ``times.parse`` and ``times.format`` procs have been rewritten.\n  The proc signatures are the same so it should generally not break anything.\n  However, the new implementation is a bit stricter, which is a breaking change.\n  For example ``parse(\"2017-01-01 foo\", \"yyyy-MM-dd\")`` will now raise an error.\n\n- ``proc `-`*(a, b: Time): int64`` in the ``times`` module has changed return type\n  to ``times.Duration`` in order to support higher time resolutions.\n  The proc is no longer deprecated.\n\n- The ``times.Timezone`` is now an immutable ref-type that must be initialized\n  with an explicit constructor (``newTimezone``).\n\n- ``posix.Timeval.tv_sec`` has changed type to ``posix.Time``.\n\n- ``math.`mod` `` for floats now behaves the same as ``mod`` for integers\n  (previously it used floor division like Python). Use ``math.floorMod`` for the old behavior.\n\n- For string inputs, ``unicode.isUpper`` and ``unicode.isLower`` now require a\n  second mandatory parameter ``skipNonAlpha``.\n\n- For string inputs, ``strutils.isUpperAscii`` and ``strutils.isLowerAscii`` now\n  require a second mandatory parameter ``skipNonAlpha``.\n\n- ``osLastError`` is now marked with ``sideEffect``\n- The procs ``parseHexInt`` and ``parseOctInt`` now fail on empty strings\n  and strings containing only valid prefixes, e.g. \"0x\" for hex integers.\n\n- ``terminal.setCursorPos`` and ``terminal.setCursorXPos`` now work correctly\n  with 0-based coordinates on POSIX (previously, you needed to use\n  1-based coordinates on POSIX for correct behaviour; the Windows behaviour\n  was always correct).\n\n- ``lineInfoObj`` now returns absolute path instead of project path.\n  It's used by ``lineInfo``, ``check``, ``expect``, ``require``, etc.\n\n- ``net.sendTo`` no longer returns an int and now raises an ``OSError``.\n- `threadpool`'s `await` and derivatives have been renamed to `blockUntil`\n  to avoid confusions with `await` from the `async` macro.\n\n\n\n## Library additions\n\n- ``re.split`` now also supports the ``maxsplit`` parameter for consistency\n  with ``strutils.split``.\n- Added ``system.toOpenArray`` in order to support zero-copy slicing\n  operations. This is currently not yet available for the JavaScript target.\n- Added ``getCurrentDir``, ``findExe``, ``cpDir`` and  ``mvDir`` procs to\n  ``nimscript``.\n- The ``times`` module now supports up to nanosecond time resolution when available.\n- Added the type ``times.Duration`` for representing fixed durations of time.\n- Added the proc ``times.convert`` for converting between different time units,\n  e.g days to seconds.\n- Added the proc ``algorithm.binarySearch[T, K]`` with the ```cmp``` parameter.\n- Added the proc ``algorithm.upperBound``.\n- Added inverse hyperbolic functions, ``math.arcsinh``, ``math.arccosh`` and ``math.arctanh`` procs.\n- Added cotangent, secant and cosecant procs ``math.cot``, ``math.sec`` and ``math.csc``; and their hyperbolic, inverse and inverse hyperbolic functions, ``math.coth``, ``math.sech``, ``math.csch``, ``math.arccot``, ``math.arcsec``, ``math.arccsc``, ``math.arccoth``, ``math.arcsech`` and ``math.arccsch`` procs.\n- Added the procs ``math.floorMod`` and ``math.floorDiv`` for floor based integer division.\n- Added the procs ``rationals.`div```, ``rationals.`mod```, ``rationals.floorDiv`` and ``rationals.floorMod`` for rationals.\n- Added the proc ``math.prod`` for product of elements in an openArray.\n- Added the proc ``parseBinInt`` to parse a binary integer from a string, which returns the value.\n- ``parseOct`` and ``parseBin`` in parseutils now also support the ``maxLen`` argument similar to ``parseHexInt``.\n- Added the proc ``flush`` for memory mapped files.\n- Added the ``MemMapFileStream``.\n- Added a simple interpreting event parser template ``eventParser`` to the ``pegs`` module.\n- Added ``macros.copyLineInfo`` to copy lineInfo from other node.\n- Added ``system.ashr`` an arithmetic right shift for integers.\n\n\n## Library changes\n\n- The stdlib module ``future`` has been renamed to ``sugar``.\n- ``macros.callsite`` is now deprecated. Since the introduction of ``varargs``\n  parameters this became unnecessary.\n\n- ``macros.astGenRepr``, ``macros.lispRepr`` and ``macros.treeRepr``\n  now escapes the content of string literals consistently.\n- ``macros.NimSym`` and ``macros.NimIdent`` is now deprecated in favor\n  of the more general ``NimNode``.\n- ``macros.getImpl`` now includes the pragmas of types, instead of omitting them.\n- ``macros.hasCustomPragma`` and ``macros.getCustomPragmaVal`` now\n  also support ``ref`` and ``ptr`` types, pragmas on types and variant\n  fields.\n- ``system.SomeReal`` is now called ``SomeFloat`` for consistency and\n  correctness.\n- ``algorithm.smartBinarySearch`` and ``algorithm.binarySearch`` is\n  now joined in ``binarySearch``. ``smartbinarySearch`` is now\n  deprecated.\n- The `terminal` module now exports additional procs for generating ANSI color\n  codes as strings.\n- Added the parameter ``val`` for the ``CritBitTree[int].inc`` proc.\n- An exception raised from a ``test`` block of ``unittest`` now shows its type in\n  error message.\n- The ``compiler/nimeval`` API was rewritten to simplify the \"compiler as an\n  API\". Using the Nim compiler and its VM as a scripting engine has never been\n  easier. See ``tests/compilerapi/tcompilerapi.nim`` for an example of how to\n  use the Nim VM in a native Nim application.\n- Added the parameter ``val`` for the ``CritBitTree[T].incl`` proc.\n- The proc ``tgamma`` was renamed to ``gamma``. ``tgamma`` is deprecated.\n- The ``pegs`` module now exports getters for the fields of its ``Peg`` and ``NonTerminal``\n  object types. ``Peg``s with child nodes now have the standard ``items`` and ``pairs``\n  iterators.\n- The ``accept`` socket procedure defined in the ``net`` module can now accept\n  a nil socket.\n\n\n## Language additions\n\n- Dot calls combined with explicit generic instantiations can now be written\n  as ``x.y[:z]`` which is transformed into ``y[z](x)`` by the parser.\n- ``func`` is now an alias for ``proc {.noSideEffect.}``.\n- In order to make ``for`` loops and iterators more flexible to use Nim now\n  supports so called \"for-loop macros\". See\n  the [manual](https://nim-lang.org/docs/manual.html#macros-for-loop-macros) for more details.\n  This feature enables a Python-like generic ``enumerate`` implementation.\n\n- Case statements can now be rewritten via macros. See the [manual](https://nim-lang.org/docs/manual.html#macros-case-statement-macros) for more information.\n  This feature enables custom pattern matchers.\n\n- the `typedesc` special type has been renamed to just `type`.\n- `static` and `type` are now also modifiers similar to `ref` and `ptr`.\n  They denote the special types `static[T]` and `type[T]`.\n- Forcing compile-time evaluation with `static` now supports specifying\n  the desired target type (as a concrete type or as a type class)\n- The `type` operator now supports checking that the supplied expression\n  matches an expected type constraint.\n\n\n## Language changes\n\n- Anonymous tuples with a single element can now be written as ``(1,)`` with a\n  trailing comma. The underlying AST is ``nnkTupleConstr(newLit 1)`` for this\n  example. ``nnkTupleConstr`` is a new node kind your macros need to be able\n  to deal with!\n- Indexing into a ``cstring`` for the JS target is now mapped\n  to ``charCodeAt``.\n- Assignments that would \"slice\" an object into its supertype are now prevented\n  at runtime. Use ``ref object`` with inheritance rather than ``object`` with\n  inheritance to prevent this issue.\n- The ``not nil`` type annotation now has to be enabled explicitly\n  via ``{.experimental: \"notnil\"}`` as we are still not pleased with how this\n  feature works with Nim's containers.\n- The parser now warns about inconsistent spacing around binary operators as\n  these can easily be confused with unary operators. This warning will likely\n  become an error in the future.\n- The ``'c`` and ``'C'`` suffix for octal literals is now deprecated to\n  bring the language in line with the standard library (e.g. ``parseOct``).\n- The dot style for import paths (e.g ``import path.to.module`` instead of\n  ``import path/to/module``) has been deprecated.\n\n- The `importcpp` pragma now allows importing the listed fields of generic\n  C++ types. Support for numeric parameters have also been added through\n  the use of `static[T]` types.\n  (#6415)\n\n- Native C++ exceptions can now be imported with `importcpp` pragma.\n  Imported exceptions can be raised and caught just like Nim exceptions.\n  More details in language manual.\n\n- ``nil`` for strings/seqs is finally gone. Instead the default value for\n  these is ``\"\" / @[]``. Use ``--nilseqs:on`` for a transition period.\n\n- Accessing the binary zero terminator in Nim's native strings\n  is now invalid. Internally a Nim string still has the trailing zero for\n  zero-copy interoperability with ``cstring``. Compile your code with the\n  new switch ``--laxStrings:on`` if you need a transition period.\n\n- The command syntax now supports keyword arguments after the first comma.\n\n- Thread-local variables can now be declared inside procs. This implies all\n  the effects of the ``global`` pragma.\n\n- Nim now supports the ``except`` clause in the export statement.\n\n- Range checked floating point types, for example ``range[0.0 .. Inf]``,\n  are now supported.\n- The ``{.this.}`` pragma has been deprecated. It never worked within generics and\n  we found the resulting code harder to read than the more explicit ``obj.field``\n  syntax.\n- \"Memory regions\" for pointer types have been deprecated, they were hardly used\n  anywhere. Note that this has **nothing** to do with the ``--gc:regions`` switch\n  of managing memory.\n\n- The exception hierarchy was slightly reworked, ``SystemError`` was renamed to\n  ``CatchableError`` and is the new base class for any exception that is guaranteed to\n  be catchable. This change should have minimal impact on most existing Nim code.\n\n\n### Tool changes\n\n- ``jsondoc2`` has been renamed ``jsondoc``, similar to how ``doc2`` was renamed\n  ``doc``. The old ``jsondoc`` can still be invoked with ``jsondoc0``.\n\n### Compiler changes\n\n- The undocumented ``#? braces`` parsing mode was removed.\n- The undocumented PHP backend was removed.\n\n- The VM's instruction count limit was raised to 3 million instructions in\n  order to support more complex computations at compile-time.\n\n- Support for hot code reloading has been implemented for the JavaScript\n  target. To use it, compile your code with `--hotCodeReloading:on` and use a\n  helper library such as LiveReload or BrowserSync.\n\n- A new compiler option `--cppCompileToNamespace` puts the generated C++ code\n  into the namespace \"Nim\" in order to avoid naming conflicts with existing\n  C++ code. This is done for all Nim code - internal and exported.\n\n- Added ``macros.getProjectPath`` and ``ospaths.putEnv`` procs to Nim's virtual\n  machine.\n\n- The ``deadCodeElim`` option is now always turned on and the switch has no\n  effect anymore, but is recognized for backwards compatibility.\n\n- ``experimental`` is now a pragma / command line switch that can enable specific\n  language extensions, it is not an all-or-nothing switch anymore.\n\n- Nintendo Switch was added as a new platform target. See [the compiler user guide](https://nim-lang.org/docs/nimc.html)\n  for more info.\n\n- macros.bindSym now capable to accepts not only literal string or string constant expression.\n  bindSym enhancement make it also can accepts computed string or ident node inside macros /\n  compile time functions / static blocks. Only in templates / regular code it retains it's\n  old behavior.\n  This new feature can be accessed via {.experimental: \"dynamicBindSym\".} pragma/switch.\n\n- On Posix systems the global system wide configuration is now put under ``/etc/nim/nim.cfg``,\n  it used to be ``/etc/nim.cfg``. Usually it does not exist, however.\n\n- On Posix systems the user configuration is now looked under ``$XDG_CONFIG_HOME/nim/nim.cfg``\n  (if ``XDG_CONFIG_HOME`` is not defined, then under ``~/.config/nim/nim.cfg``). It used to be\n  ``$XDG_CONFIG_DIR/nim.cfg`` (and ``~/.config/nim.cfg``).\n\n  Similarly, on Windows, the user configuration is now looked under ``%APPDATA%/nim/nim.cfg``.\n  This used to be ``%APPDATA%/nim.cfg``.\n\n\n## Bugfixes\n\n- Fixed \"constructor pragma leads to \"Most Vexing Parse\" in c++ code gen\"\n  ([#6837](https://github.com/nim-lang/Nim/issues/6837))\n\n- Fixed \"[RFC] newFileStream(string, FileMode) returns nil\"\n  ([#5588](https://github.com/nim-lang/Nim/issues/5588))\n- Fixed \"Search feature doesn't work on all docs pages \"\n  ([#7294](https://github.com/nim-lang/Nim/issues/7294))\n- Fixed \"Wrong comparison with empty string in version 0.18\"\n  ([#7291](https://github.com/nim-lang/Nim/issues/7291))\n- Fixed \"doc2 css troubles\"\n  ([#5293](https://github.com/nim-lang/Nim/issues/5293))\n- Fixed \"SIGSEGV when passing empty array to strutils format\"\n  ([#7293](https://github.com/nim-lang/Nim/issues/7293))\n- Fixed \"strip() weird behavior \"\n  ([#7159](https://github.com/nim-lang/Nim/issues/7159))\n- Fixed \"On Windows: When app type is GUI, error message can't be seen, about missing DLL file or procedure\"\n  ([#7212](https://github.com/nim-lang/Nim/issues/7212))\n- Fixed \"Compiler crash: multiple exception types with infix as\"\n  ([#7115](https://github.com/nim-lang/Nim/issues/7115))\n- Fixed \"C++ template object: Internal Error mangleRecFieldName\"\n  ([#6415](https://github.com/nim-lang/Nim/issues/6415))\n- Fixed \"Undefined Behavior when using const/let tables (Nim v0.18.1)\"\n  ([#7332](https://github.com/nim-lang/Nim/issues/7332))\n- Fixed \"Codegen: forward type declarations can be used more aggressively\"\n  ([#7339](https://github.com/nim-lang/Nim/issues/7339))\n- Fixed \"asyncfile getFileSize issue in linux\"\n  ([#7347](https://github.com/nim-lang/Nim/issues/7347))\n- Fixed \"Compiler manual is not that clear about int literal\"\n  ([#7304](https://github.com/nim-lang/Nim/issues/7304))\n- Fixed \"Bad error message when writing to a data structure within read-only object\"\n  ([#7335](https://github.com/nim-lang/Nim/issues/7335))\n- Fixed \"Compiler crash using @[int]\"\n  ([#7331](https://github.com/nim-lang/Nim/issues/7331))\n- Fixed \"Redefinition of object in C when a proc with sink param is defined.\"\n  ([#7364](https://github.com/nim-lang/Nim/issues/7364))\n- Fixed \"[Regression] Missing type declarations in C code if members are used in {.emit.}\"\n  ([#7363](https://github.com/nim-lang/Nim/issues/7363))\n- Fixed \"(regression) dereferencing pointer to incomplete type\"\n  ([#7392](https://github.com/nim-lang/Nim/issues/7392))\n- Fixed \"In nested try statements finally is not executed\"\n  ([#7414](https://github.com/nim-lang/Nim/issues/7414))\n- Fixed \"json.to doesn't work when Option[T] is inside an array\"\n  ([#7433](https://github.com/nim-lang/Nim/issues/7433))\n- Fixed \"https://nim-lang.org/docs/lib.html => If you are reading this you are missing nimblepkglist.js...\"\n  ([#7400](https://github.com/nim-lang/Nim/issues/7400))\n- Fixed \"json.to and Option[T] fails on JNull in JSON list literal\"\n  ([#6902](https://github.com/nim-lang/Nim/issues/6902))\n- Fixed \"inconsistent escaping of string literals\"\n  ([#7473](https://github.com/nim-lang/Nim/issues/7473))\n- Fixed \"streams.readLine(): string should raise IOError, but doesn't\"\n  ([#5281](https://github.com/nim-lang/Nim/issues/5281))\n\n- Fixed \"Duplicate definition in cpp codegen\"\n  ([#6986](https://github.com/nim-lang/Nim/issues/6986))\n- Fixed \"error at compile-time when case branch has implicit return\"\n  ([#7407](https://github.com/nim-lang/Nim/issues/7407))\n- Fixed \"Still some issues with Static[T]\"\n  ([#6843](https://github.com/nim-lang/Nim/issues/6843))\n- Fixed \"[regression] compiler/nimeval `execute(\"echo 1\")` => Error: cannot 'importc' variable at compile time\"\n  ([#7522](https://github.com/nim-lang/Nim/issues/7522))\n- Fixed \"Too many digits from float32 to string\"\n  ([#7252](https://github.com/nim-lang/Nim/issues/7252))\n- Fixed \"SIGSEGV: Illegal storage access. (Attempt to read from nil?)\"\n  ([#7528](https://github.com/nim-lang/Nim/issues/7528))\n- Fixed \"Catching C++ exceptions in Nim\"\n  ([#3571](https://github.com/nim-lang/Nim/issues/3571))\n- Fixed \"[RFC] Naming convention for in-place mutating procs\"\n  ([#7551](https://github.com/nim-lang/Nim/issues/7551))\n- Fixed \"Compiler SIGSEGV when trying to use invalid subrange type\"\n  ([#6895](https://github.com/nim-lang/Nim/issues/6895))\n- Fixed \"Internal error: invalid kind for first(tyTuple) with parallel block\"\n  ([#2779](https://github.com/nim-lang/Nim/issues/2779))\n- Fixed \"type checking issue when using an empty sequence embedded in a table\"\n  ([#3948](https://github.com/nim-lang/Nim/issues/3948))\n- Fixed \"Deprecate ``callsite`` builtin\"\n  ([#7369](https://github.com/nim-lang/Nim/issues/7369))\n- Fixed \"JS codegen - indexing into cstring.\"\n  ([#4470](https://github.com/nim-lang/Nim/issues/4470))\n\n- Fixed \"strutils.formatEng relies on a distinction of \"\" and nil string\"\n  ([#6205](https://github.com/nim-lang/Nim/issues/6205))\n- Fixed \"timeToTimeInfo issue\"\n  ([#3678](https://github.com/nim-lang/Nim/issues/3678))\n- Fixed \"checking object type for a pragma is not possible\"\n  ([#7451](https://github.com/nim-lang/Nim/issues/7451))\n- Fixed \"nnkBracketExpr.newTree now returns tuple of NimNodes breaking newTree chaining\"\n  ([#7610](https://github.com/nim-lang/Nim/issues/7610))\n\n- Fixed \"\"newNilLitNode\" printed when some objects' AST is dumped shold be \"newNilLit\"\"\n  ([#7595](https://github.com/nim-lang/Nim/issues/7595))\n\n- Fixed \"string.replace() should throw an error when used with an empty string\"\n  ([#7507](https://github.com/nim-lang/Nim/issues/7507))\n- Fixed \"Threadpool `awaitAny()` problem on macOS\"\n  ([#7638](https://github.com/nim-lang/Nim/issues/7638))\n- Fixed \"TLineInfo on windows 32bit\"\n  ([#7654](https://github.com/nim-lang/Nim/issues/7654))\n- Fixed \"Object slicing can bite our arses\"\n  ([#7637](https://github.com/nim-lang/Nim/issues/7637))\n- Fixed \"A warning for unused but conflicting procs would be nice\"\n  ([#6393](https://github.com/nim-lang/Nim/issues/6393))\n- Fixed \"Using var return types will result in segfaults in some cases\"\n  ([#5113](https://github.com/nim-lang/Nim/issues/5113))\n- Fixed \"Borrowing for ``var T`` and ``lent T`` to improve Nim's memory safety\"\n  ([#7373](https://github.com/nim-lang/Nim/issues/7373))\n- Fixed \"Documentation/implementation mismatch for --genScript flag\"\n  ([#802](https://github.com/nim-lang/Nim/issues/802))\n- Fixed \"httpclient.generateHeaders() not setting Content-Length if body.len=0\"\n  ([#7680](https://github.com/nim-lang/Nim/issues/7680))\n- Fixed \"generic object descended from generic ref object sigmatch bug\"\n  ([#7600](https://github.com/nim-lang/Nim/issues/7600))\n- Fixed \"array construction of ptr generic object with subtype relation failed\"\n  ([#7601](https://github.com/nim-lang/Nim/issues/7601))\n- Fixed \"ambiguously typed/tuple combination with auto result type leads to a compile-time crash with SIGSEGV\"\n  ([#7663](https://github.com/nim-lang/Nim/issues/7663))\n- Fixed \"nim --linedir:on c file segfaults\"\n  ([#7730](https://github.com/nim-lang/Nim/issues/7730))\n- Fixed \"Better compiler warning/error messages\"\n  ([#7749](https://github.com/nim-lang/Nim/issues/7749))\n\n- Fixed \"Issues with finish.exe\"\n  ([#7747](https://github.com/nim-lang/Nim/issues/7747))\n\n- Fixed \"changed \"encodeUrl\" in lib/pure/uri.nim.\"\n  ([#7700](https://github.com/nim-lang/Nim/issues/7700))\n- Fixed \"Unexpected import required\"\n  ([#7738](https://github.com/nim-lang/Nim/issues/7738))\n- Fixed \"Strange interaction of add for string without explicit initialization\"\n  ([#7766](https://github.com/nim-lang/Nim/issues/7766))\n- Fixed \"Command invocation syntax doesn't work with unary operators\"\n  ([#7582](https://github.com/nim-lang/Nim/issues/7582))\n- Fixed \"Command invocation syntax doesn't work with unary operators\"\n  ([#7582](https://github.com/nim-lang/Nim/issues/7582))\n- Fixed \"3x performance regression\"\n  ([#7743](https://github.com/nim-lang/Nim/issues/7743))\n- Fixed \"seq is still nil in compile time\"\n  ([#7774](https://github.com/nim-lang/Nim/issues/7774))\n- Fixed \"Compiler segfault on sink proc for type with destructor under special condition\"\n  ([#7757](https://github.com/nim-lang/Nim/issues/7757))\n- Fixed \"Windows getch() does not correctly account for control keys\"\n  ([#7764](https://github.com/nim-lang/Nim/issues/7764))\n- Fixed \"thread local variable `threadvar` not working as expected (differs from C++ thread_local and D static)\"\n  ([#7565](https://github.com/nim-lang/Nim/issues/7565))\n- Fixed \"Setting a timeout causes assertion failures in httpclient\"\n  ([#2753](https://github.com/nim-lang/Nim/issues/2753))\n- Fixed \"Can't convert expression when surrounded with parens using %*\"\n  ([#7817](https://github.com/nim-lang/Nim/issues/7817))\n- Fixed \"Line number missing in stdlib trace\"\n  ([#6832](https://github.com/nim-lang/Nim/issues/6832))\n- Fixed \"Filter skips lines with only single character\"\n  ([#7855](https://github.com/nim-lang/Nim/issues/7855))\n- Fixed \"[regression] nimscript.task crash the compiler\"\n  ([#7696](https://github.com/nim-lang/Nim/issues/7696))\n- Fixed \"IndexError in streams.readStr()\"\n  ([#7877](https://github.com/nim-lang/Nim/issues/7877))\n- Fixed \"IndexError in streams.readStr()\"\n  ([#7877](https://github.com/nim-lang/Nim/issues/7877))\n- Fixed \"generic \"Error: cannot instantiate: 'T'\" with overload(regression)\"\n  ([#7883](https://github.com/nim-lang/Nim/issues/7883))\n- Fixed \"marshal.store generates invalid JSON\"\n  ([#7881](https://github.com/nim-lang/Nim/issues/7881))\n- Fixed \"inconsistent internal representation of generic objects array construction\"\n  ([#7818](https://github.com/nim-lang/Nim/issues/7818))\n- Fixed \"There's no `$` for openArray\"\n  ([#7940](https://github.com/nim-lang/Nim/issues/7940))\n- Fixed \"array and openarray arg vs. ptr/ref generic polymorphic issue\"\n  ([#7906](https://github.com/nim-lang/Nim/issues/7906))\n- Fixed \"Yield in try generate stack error \"\n  ([#7969](https://github.com/nim-lang/Nim/issues/7969))\n- Fixed \"Bad codegen (runtime crash) when catching exceptions in a proc with no stack trace\"\n  ([#7982](https://github.com/nim-lang/Nim/issues/7982))\n- Fixed \"`$` doesn't work for CritBitTree[void]\"\n  ([#7987](https://github.com/nim-lang/Nim/issues/7987))\n- Fixed \"Assertion  at runtime with await and json.to()\"\n  ([#7985](https://github.com/nim-lang/Nim/issues/7985))\n- Fixed \"[critbits[int]] When using `inc` to add new keys, only the first added key gets the value 1\"\n  ([#7990](https://github.com/nim-lang/Nim/issues/7990))\n- Fixed \"Error: obsolete usage of 'defined', use 'declared' instead\"\n  ([#7997](https://github.com/nim-lang/Nim/issues/7997))\n\n- Fixed \"C++ codegen: importcpp breaks for generic types.\"\n  ([#7653](https://github.com/nim-lang/Nim/issues/7653))\n- Fixed \"Bad line info in async code\"\n  ([#6803](https://github.com/nim-lang/Nim/issues/6803))\n- Fixed \"tmacrostmt immediate pragma cannot be removed\"\n  ([#5930](https://github.com/nim-lang/Nim/issues/5930))\n- Fixed \"parseBinInt\"\n  ([#8018](https://github.com/nim-lang/Nim/issues/8018))\n- Fixed \"RFC: Import Module Namespaces\"\n  ([#7250](https://github.com/nim-lang/Nim/issues/7250))\n- Fixed \"All symbols in concepts should be open by default\"\n  ([#7222](https://github.com/nim-lang/Nim/issues/7222))\n- Fixed \"static[T] issue with default arguments\"\n  ([#6928](https://github.com/nim-lang/Nim/issues/6928))\n- Fixed \"Compiler crash when casting a proc with asm statement to a pointer\"\n  ([#8076](https://github.com/nim-lang/Nim/issues/8076))\n- Fixed \"[regression]: nim doc <program.nim> produces <.html> instead of <program.html>\"\n  ([#8097](https://github.com/nim-lang/Nim/issues/8097))\n\n- Fixed \"[Regression] times.format interferes with strformat\"\n  ([#8100](https://github.com/nim-lang/Nim/issues/8100))\n- Fixed \"Regression: SIGSEGV caused by using `is` with string\"\n  ([#8129](https://github.com/nim-lang/Nim/issues/8129))\n- Fixed \"uninitialized procs variables are not nil at compile time\"\n  ([#6689](https://github.com/nim-lang/Nim/issues/6689))\n- Fixed \"unixToNativePath cause IndexError with Empty string or \".\"\"\n  ([#8173](https://github.com/nim-lang/Nim/issues/8173))\n\n- Fixed \"Octal int literal behavior differs from `parseOct` - change `parseOct`?\"\n  ([#8082](https://github.com/nim-lang/Nim/issues/8082))\n\n- Fixed \"[travis] flaky test: \"No output has been received\" caused by no prompt on \"already exists. Overwrite?\" after `nimble install`\"\n  ([#8227](https://github.com/nim-lang/Nim/issues/8227))\n\n- Fixed \"noSideEffect in os module\"\n  ([#5880](https://github.com/nim-lang/Nim/issues/5880))\n- Fixed \"missing `ospaths.absolutePath` function to get absolute path from a path\"\n  ([#8174](https://github.com/nim-lang/Nim/issues/8174))\n- Fixed \"Render bug with prefix and implicit string/cstring conversion\"\n  ([#8287](https://github.com/nim-lang/Nim/issues/8287))\n\n- Fixed \"ospaths.isAbsolute: uncovering out of bound bugs after updating to 0.18.1 from 0.18.0: empty string and nil string now checked for out of bound errors\"\n  ([#8251](https://github.com/nim-lang/Nim/issues/8251))\n- Fixed \"`Error: cannot 'importc' variable at compile time` shows wrong context\"\n  ([#7405](https://github.com/nim-lang/Nim/issues/7405))\n- Fixed \"[regression] [times.format] Error: attempting to call undeclared routine: 'format'\"\n  ([#8273](https://github.com/nim-lang/Nim/issues/8273))\n- Fixed \"`htmlparser.untilElementEnd` is not GC-safe\"\n  ([#8338](https://github.com/nim-lang/Nim/issues/8338))\n- Fixed \"`nim check` internal error\"\n  ([#8230](https://github.com/nim-lang/Nim/issues/8230))\n- Fixed \"`nim doc` fails when source file contains `doAssertRaises` in isMainModule\"\n  ([#8223](https://github.com/nim-lang/Nim/issues/8223))\n- Fixed \"Windows: can't compile with var name \"far\"\"\n  ([#8345](https://github.com/nim-lang/Nim/issues/8345))\n- Fixed \"Render bug: procs with single if statement get incorrent indentation\"\n  ([#8343](https://github.com/nim-lang/Nim/issues/8343))\n- Fixed \"json.nim macro `to` does not support objects with distinct types\"\n  ([#8037](https://github.com/nim-lang/Nim/issues/8037))\n- Fixed \"macros.hasCustomPragma() crashes when working with variant fields\"\n  ([#8371](https://github.com/nim-lang/Nim/issues/8371))\n- Fixed \"await inside stmtListExpr inside a case stmt crashes compiler\"\n  ([#8399](https://github.com/nim-lang/Nim/issues/8399))\n\n- Fixed \"[os] failed operations (eg existsOrCreateDir) should show runtime context (eg file/dir) it failed for\"\n  ([#8391](https://github.com/nim-lang/Nim/issues/8391))\n\n- Fixed \"[ospaths] ospaths.nim says OSX is FileSystemCaseSensitive:true but should be false ; cmpPaths seems wrong\"\n  ([#8349](https://github.com/nim-lang/Nim/issues/8349))\n- Fixed \"excessiveStackTrace:on shows non-absolute file in stacktrace\"\n  ([#7492](https://github.com/nim-lang/Nim/issues/7492))\n\n- Fixed \"`nim doc foo` generates stuff that should be under a .gitignore'd directory\"\n  ([#8323](https://github.com/nim-lang/Nim/issues/8323))\n- Fixed \"type mismatch shows wrong type for union types T1|T2|T3|T4: only keeps T1 or T2, discards rest\"\n  ([#8434](https://github.com/nim-lang/Nim/issues/8434))\n- Fixed \"devel branch encodings.convert broken on Windows\"\n  ([#8468](https://github.com/nim-lang/Nim/issues/8468))\n- Fixed \"--app:gui gives an error on osx.\"\n  ([#2576](https://github.com/nim-lang/Nim/issues/2576))\n- Fixed \"non ordinal enums are not allowed in set constructor\"\n  ([#8425](https://github.com/nim-lang/Nim/issues/8425))\n- Fixed \"[nimweb] ./koch web -o:/tmp/d13/ => `o` is actually unused and docs output dir hardcoded regardless of o\"\n  ([#8419](https://github.com/nim-lang/Nim/issues/8419))\n- Fixed \"seq/string initialized with `add` or `setLen` being deallocated\"\n  ([#7833](https://github.com/nim-lang/Nim/issues/7833))\n- Fixed \"alloc fails after 4GB\"\n  ([#7894](https://github.com/nim-lang/Nim/issues/7894))\n- Fixed \"[feature request] macros.bindSym can accept computed string\"\n  ([#7827](https://github.com/nim-lang/Nim/issues/7827))\n- Fixed \"tfragment_alloc.nim (which allocates 4GB) often makes appveyor fail with out of memory\"\n  ([#8509](https://github.com/nim-lang/Nim/issues/8509))\n- Fixed \"`echo` not thread safe on windows, causing [appveyor] flaky test: Failure: reOutputsDiffer in tforstmt.nim\"\n  ([#8511](https://github.com/nim-lang/Nim/issues/8511))\n- Fixed \"./koch xz doesn't check for dirty work tree\"\n  ([#7292](https://github.com/nim-lang/Nim/issues/7292))\n- Fixed \"non ordinal enums are not allowed in set constructor\"\n  ([#8425](https://github.com/nim-lang/Nim/issues/8425))\n- Fixed \"bad example in https://nim-lang.org/docs/docgen.html\"\n  ([#8215](https://github.com/nim-lang/Nim/issues/8215))\n- Fixed \"Ability to set a NimNode's lineinfo\"\n  ([#5617](https://github.com/nim-lang/Nim/issues/5617))\n- Fixed \"winlean.nim has wrong definition for moveFileExA\"\n  ([#8421](https://github.com/nim-lang/Nim/issues/8421))\n- Fixed \"shr operator should keep the sign bit on signed types.\"\n  ([#6255](https://github.com/nim-lang/Nim/issues/6255))\n- Fixed \"proposal (with implementation): `undistinct(T)`\"\n  ([#8519](https://github.com/nim-lang/Nim/issues/8519))\n- Fixed \"`.cache/projectname` pollutes `.cache` - put in `.cache/Nim/projectname` instead\"\n  ([#8599](https://github.com/nim-lang/Nim/issues/8599))\n\n- Fixed \"Iterating closure iterator in nested function is empty\"\n  ([#8550](https://github.com/nim-lang/Nim/issues/8550))\n- Fixed \"[TODO] [feature] Nim error messages should show line contents, would save lots of debugging time\"\n  ([#7586](https://github.com/nim-lang/Nim/issues/7586))\n- Fixed \"Converter: {lit} parameter constraint is not respected in implicit conversion\"\n  ([#7520](https://github.com/nim-lang/Nim/issues/7520))\n- Fixed \"`mapIt` still can't be used with `openArray` even after #8543, #8567: fails during bootstrap\"\n  ([#8577](https://github.com/nim-lang/Nim/issues/8577))\n- Fixed \"Config should be in its own directory\"\n  ([#8653](https://github.com/nim-lang/Nim/issues/8653))\n- Fixed \"sequtils.toSeq produces the sequence from the iterator twice if compiles(iter.len) == true\"\n  ([#7187](https://github.com/nim-lang/Nim/issues/7187))\n- Fixed \"`$` for Option[string] types should double-quote the output\"\n  ([#8658](https://github.com/nim-lang/Nim/issues/8658))\n\n- Fixed \"Config should be in its own directory\"\n  ([#8653](https://github.com/nim-lang/Nim/issues/8653))\n- Fixed \"[feature request] compile time check for experimental features\"\n  ([#8644](https://github.com/nim-lang/Nim/issues/8644))\n- Fixed \"Changes in typedesc reforms\"\n  ([#8126](https://github.com/nim-lang/Nim/issues/8126))\n- Fixed \"json.% regression\"\n  ([#8716](https://github.com/nim-lang/Nim/issues/8716))\n- Fixed \"`nim doc2 --project -o:doc/ ` cannot find files in subdirectories\"\n  ([#8218](https://github.com/nim-lang/Nim/issues/8218))\n- Fixed \"`onFailedAssert` does not affect `doAssert`\"\n  ([#8719](https://github.com/nim-lang/Nim/issues/8719))\n\n- Fixed \"[travis] [async] flaky test: tests/async/t7758.nim\"\n  ([#8756](https://github.com/nim-lang/Nim/issues/8756))\n- Fixed \"float literals are treated differently between manual and compiler\"\n  ([#8766](https://github.com/nim-lang/Nim/issues/8766))\n- Fixed \"[cmdline] [minor] `--hint.foo:on` as alias for `--hint[foo]:on`: avoids edge cases with `[` that needs to be escaped on cmd line + other places\"\n  ([#8739](https://github.com/nim-lang/Nim/issues/8739))\n\n- Fixed \"Duplicate member error for union types\"\n  ([#8781](https://github.com/nim-lang/Nim/issues/8781))\n- Fixed \"nim c compiler/nimblecmd.nim fails:  Error: type mismatch: got <StringTableRef, string>\"\n  ([#8776](https://github.com/nim-lang/Nim/issues/8776))\n- Fixed \"Compiler crash with $, converter and generics\"\n  ([#4766](https://github.com/nim-lang/Nim/issues/4766))\n- Fixed \"[unidecode] Fix the `unidecode` example\"\n  ([#8768](https://github.com/nim-lang/Nim/issues/8768))\n- Fixed \"[unidecode] Make `loadUnidecodeTable` use the path to unicode.dat on user's system by default\"\n  ([#8767](https://github.com/nim-lang/Nim/issues/8767))\n- Fixed \"marshal.load() regression?\"\n  ([#7854](https://github.com/nim-lang/Nim/issues/7854))\n- Fixed \"[unidecode] Fix the `unidecode` example\"\n  ([#8768](https://github.com/nim-lang/Nim/issues/8768))\n- Fixed \"Converter applied when it should not be\"\n  ([#8049](https://github.com/nim-lang/Nim/issues/8049))\n- Fixed \"Pure enums allow using the same name but allow nonqualification with quirky behaviour\"\n  ([#8066](https://github.com/nim-lang/Nim/issues/8066))\n\n- Fixed \"Correctly redirect stderr when using osproc's posix_spawn backend\"\n  ([#8624](https://github.com/nim-lang/Nim/issues/8624))\n- Fixed \"`errorStream` doesn't seem to work\"\n  ([#8442](https://github.com/nim-lang/Nim/issues/8442))\n- Fixed \"Nested template: SIGSEGV at compile-time\"\n  ([#8052](https://github.com/nim-lang/Nim/issues/8052))\n- Fixed \"`Error: undeclared identifier: '|'` when using `|` inside a `runnableExamples:`\"\n  ([#8694](https://github.com/nim-lang/Nim/issues/8694))\n- Fixed \"runnableExamples doesn't work at module level\"\n  ([#8641](https://github.com/nim-lang/Nim/issues/8641))\n- Fixed \"[runnableExamples] `Hint: operation successful: runnableExamples` even though operation failed: compile error is ignored\"\n  ([#8831](https://github.com/nim-lang/Nim/issues/8831))\n- Fixed \"`runnableExamples` don't have own scope for imports\"\n  ([#7285](https://github.com/nim-lang/Nim/issues/7285))\n- Fixed \"`nim check` segfaults\"\n  ([#8028](https://github.com/nim-lang/Nim/issues/8028))\n- Fixed \"addQuoted gives unquoted result on cstring (works on string)\"\n  ([#8847](https://github.com/nim-lang/Nim/issues/8847))\n- Fixed \"[nimscript] exception handling broken: `except BaseClass` doesn't work\"\n  ([#8740](https://github.com/nim-lang/Nim/issues/8740))\n- Fixed \"Unary `.` operator can't be parsed\"\n  ([#8797](https://github.com/nim-lang/Nim/issues/8797))\n- Fixed \"system.on_raise works only for \"single level\"\"\n  ([#1652](https://github.com/nim-lang/Nim/issues/1652))\n- Fixed \"Final facelifiting nimrod -> nim\"\n  ([#2032](https://github.com/nim-lang/Nim/issues/2032))\n- Fixed \"marshal: document usage of \"to\"\"\n  ([#3150](https://github.com/nim-lang/Nim/issues/3150))\n- Fixed \"Name conflict between template and proc parameter\"\n  ([#4750](https://github.com/nim-lang/Nim/issues/4750))\n- Fixed \"Operator overloading bug with unittest check macro\"\n  ([#5252](https://github.com/nim-lang/Nim/issues/5252))\n- Fixed \"nim check crash due to typo\"\n  ([#5745](https://github.com/nim-lang/Nim/issues/5745))\n- Fixed \"Regression (?): ICE in transformImportAs\"\n  ([#8852](https://github.com/nim-lang/Nim/issues/8852))\n- Fixed \"generic match error\"\n  ([#1156](https://github.com/nim-lang/Nim/issues/1156))\n- Fixed \"Adding a mention of the `unsafeAddr` operator to the Nim manual\"\n  ([#5038](https://github.com/nim-lang/Nim/issues/5038))\n- Fixed \"`using` types should have higher precedence\"\n  ([#8565](https://github.com/nim-lang/Nim/issues/8565))\n- Fixed \"Add noSignalHandler documentation and examples\"\n  ([#8224](https://github.com/nim-lang/Nim/issues/8224))\n- Fixed \"`-d:identifier` is case insensitive (not partially case insensitive)\"\n  ([#7506](https://github.com/nim-lang/Nim/issues/7506))\n- Fixed \"addQuitProc argument requires {.noconv.} not documented\"\n  ([#5794](https://github.com/nim-lang/Nim/issues/5794))\n- Fixed \"Compilation error does not point to the actual wrong parameter\"\n  ([#8043](https://github.com/nim-lang/Nim/issues/8043))\n- Fixed \"Clean up examples\"\n  ([#7725](https://github.com/nim-lang/Nim/issues/7725))\n- Fixed \"Documentation footer timestamp is not UTC\"\n  ([#7305](https://github.com/nim-lang/Nim/issues/7305))\n- Fixed \"Regression: compiler stack overflow in transformIteratorBody/lowerStmtListExprs\"\n  ([#8851](https://github.com/nim-lang/Nim/issues/8851))\n- Fixed \"The `writeStackTrace` proc listed twice in docs\"\n  ([#3655](https://github.com/nim-lang/Nim/issues/3655))\n- Fixed \"Error: unhandled exception: n.kind == nkStmtListExpr  [AssertionError]\"\n  ([#8243](https://github.com/nim-lang/Nim/issues/8243))\n- Fixed \"The `writeStackTrace` proc listed twice in docs\"\n  ([#3655](https://github.com/nim-lang/Nim/issues/3655))\n- Fixed \"Regression: stack trace line numbers are messed up for asserts\"\n  ([#8928](https://github.com/nim-lang/Nim/issues/8928))\n\n- Fixed \"Regression bug in lines()\"\n  ([#8961](https://github.com/nim-lang/Nim/issues/8961))\n- Fixed \"Core dump for RTree module -- regression\"\n  ([#8883](https://github.com/nim-lang/Nim/issues/8883))\n\n- Fixed \"`system.cmp` returns different results for string on different operating systems\"\n  ([#8930](https://github.com/nim-lang/Nim/issues/8930))\n- Fixed \"scanf Invalid node kind nnkBracketExpr for macros.`$`\"\n  ([#8925](https://github.com/nim-lang/Nim/issues/8925))\n\n- Fixed \"Regression bug in lines()\"\n  ([#8961](https://github.com/nim-lang/Nim/issues/8961))\n- Fixed \"Typetraits arity: off-by-one for arrays\"\n  ([#8965](https://github.com/nim-lang/Nim/issues/8965))\n- Fixed \"`strutils.nim(1533, 29) Error: illegal conversion from '-1' to '[0..9223372036854775807]'` with strutils.replace on empty string at CT\"\n  ([#8911](https://github.com/nim-lang/Nim/issues/8911))\n- Fixed \"Iterators in combination with closures misbehave\"\n  ([#3837](https://github.com/nim-lang/Nim/issues/3837))\n- Fixed \"procCall is not documented\"\n  ([#4329](https://github.com/nim-lang/Nim/issues/4329))\n- Fixed \"scanf Invalid node kind nnkBracketExpr for macros.`$`\"\n  ([#8925](https://github.com/nim-lang/Nim/issues/8925))\n- Fixed \"Add exports section to documentation generator\"\n  ([#1616](https://github.com/nim-lang/Nim/issues/1616))\n- Fixed \"Improve error message for redefinitions\"\n  ([#447](https://github.com/nim-lang/Nim/issues/447))\n- Fixed \"[minor] operator symbols in anchor text disappear, causing anchor clashes\"\n  ([#7500](https://github.com/nim-lang/Nim/issues/7500))\n\n- Fixed \"Incorrect executable name of the C compiler when performing crosscompilation\"\n  ([#8081](https://github.com/nim-lang/Nim/issues/8081))\n- Fixed \"[ICE/regression] when proc with var return type interacting with method\"\n  ([#9076](https://github.com/nim-lang/Nim/issues/9076))", "content_with_meta": "---\ntitle: \"Version 0.19.0 released\"\nauthor: The Nim Team\ntags: nim, python\n---\n\nThe Nim team is happy to announce that the latest release of Nim,\nversion 0.19.0, is now available. Nim is a systems programming language that\nfocuses on performance, portability and expressiveness.\n\n# Installing 0.19.0\n\nIf you have installed a previous version of Nim using ``choosenim``,\ngetting Nim 0.19.0 is as easy as:\n\n```bash\n$ choosenim update stable\n```\n\nIf you don't have it already, you can get ``choosenim`` by following\n[these instructions](https://github.com/dom96/choosenim) or you can install\nNim by following the instructions on our\n[install](https://nim-lang.org/install.html) page.\n\n\n# What's new in 0.19.0\n\nThe ``nil`` state for strings/seqs is gone. Instead the default value for\nthese is ``\"\" / @[]``. Use ``--nilseqs:on`` for a transition period. This\neliminates a large class of bugs that used to plague the average Nim code\nout there, including Nim's standard library.\n\nAccessing the binary zero terminator in Nim's native strings\nis now invalid. Internally a Nim string still has the trailing zero for\nzero-copy interoperability with ``cstring``. Compile your code with the\nnew switch ``--laxStrings:on`` if you need a transition period.\n\nThese changes to strings and seqs give us more flexibility in how they\nare implemented and indeed alternative implementations are in development.\n\n``experimental`` is now a pragma and a command line switch that can enable\nspecific language extensions, it is not an all-or-nothing switch anymore.\nWe think this leads to a more robust development process where it's clearly\ndocumented which parts of Nim are bleeding edge and which parts can be relied\nupon.\n\nOther notable language additions:\n\n- Dot calls combined with explicit generic instantiations can now be written\n  as ``x.y[:z]`` which is transformed into ``y[z](x)`` by the parser.\n- ``func`` is now an alias for ``proc {.noSideEffect.}``.\n- Anonymous tuples with a single element can now be written as ``(1,)`` with a\n  trailing comma.\n\n- In order to make ``for`` loops and iterators more flexible to use Nim now\n  supports so called \"for-loop macros\". See\n  the [manual](https://nim-lang.org/docs/manual.html#macros-for-loop-macros) for more details.\n  This feature enables a Python-like generic ``enumerate`` implementation.\n\n- Case statements can now be rewritten via macros. See the [manual](https://nim-lang.org/docs/manual.html#macros-case-statement-macros) for more information.\n  This feature enables custom pattern matching.\n\n- The command syntax now supports keyword arguments after the first comma.\n\n- Thread-local variables can now be declared inside procs. This implies all\n  the effects of the ``global`` pragma.\n\n- Nim now supports the ``except`` clause in the ``export`` statement.\n\n- Range float types, example ``range[0.0 .. Inf]``. More details in language manual.\n\n\n## Breaking changes to be mindful of\n\n- The default location of ``nimcache`` for the native code targets was\n  changed. Read [the compiler user guide](https://nim-lang.org/docs/nimc.html#generated-c-code-directory)\n  for more information.\n- Lots of deprecated symbols in the standard library that have been deprecated for\n  quite some time now like ``system.expr`` or the old type aliases starting with a ``T``\n  or ``P`` prefix have been removed.\n- The exception hierarchy was slightly reworked, ``SystemError`` was renamed to\n  ``CatchableError`` and is the new base class for any exception that is guaranteed to\n  be catchable. This change should have minimal impact on most existing Nim code.\n\n\n## Async improvements\n\nThe \"closure iterators\" that Nim's ``async`` macro is based on has been\nrewritten from the ground up and so ``async`` works completely with\nexception handling. Finally it is possible to use ``await`` in a ``try``\nstatement!\n\n\n## Nimble 0.9.0\n\nThis release includes a brand new version of Nimble. The new version\ncontains a breaking change which you should read up on if you own\nhybrid packages. There are also the usual bug fixes and this release\ncontains a lot of them.\n\nFor more information, see the\n[Nimble v0.9.0 changelog](https://github.com/nim-lang/nimble/blob/master/changelog.markdown#090---19092018).\n\n## Contributors to v0.19.0\n\nOur contributors are amazing, and there is\n[far too many](https://github.com/nim-lang/Nim/graphs/contributors) to list\nhere. Big thanks to all of you, we couldn't have pulled off this release\nwithout you!\n\n# Changelog\n\n## Changes affecting backwards compatibility\n\n### Breaking changes in the standard library\n\n- ``re.split`` for empty regular expressions now yields every character in\n  the string which is what other programming languages chose to do.\n- The returned tuple of ``system.instantiationInfo`` now has a third field\n  containing the column of the instantiation.\n\n- ``cookies.setCookie`` no longer assumes UTC for the expiration date.\n- ``strutils.formatEng`` does not distinguish between ``nil`` and ``\"\"``\n  strings anymore for its ``unit`` parameter. Instead the space is controlled\n  by a new parameter ``useUnitSpace``.\n\n- The ``times.parse`` and ``times.format`` procs have been rewritten.\n  The proc signatures are the same so it should generally not break anything.\n  However, the new implementation is a bit stricter, which is a breaking change.\n  For example ``parse(\"2017-01-01 foo\", \"yyyy-MM-dd\")`` will now raise an error.\n\n- ``proc `-`*(a, b: Time): int64`` in the ``times`` module has changed return type\n  to ``times.Duration`` in order to support higher time resolutions.\n  The proc is no longer deprecated.\n\n- The ``times.Timezone`` is now an immutable ref-type that must be initialized\n  with an explicit constructor (``newTimezone``).\n\n- ``posix.Timeval.tv_sec`` has changed type to ``posix.Time``.\n\n- ``math.`mod` `` for floats now behaves the same as ``mod`` for integers\n  (previously it used floor division like Python). Use ``math.floorMod`` for the old behavior.\n\n- For string inputs, ``unicode.isUpper`` and ``unicode.isLower`` now require a\n  second mandatory parameter ``skipNonAlpha``.\n\n- For string inputs, ``strutils.isUpperAscii`` and ``strutils.isLowerAscii`` now\n  require a second mandatory parameter ``skipNonAlpha``.\n\n- ``osLastError`` is now marked with ``sideEffect``\n- The procs ``parseHexInt`` and ``parseOctInt`` now fail on empty strings\n  and strings containing only valid prefixes, e.g. \"0x\" for hex integers.\n\n- ``terminal.setCursorPos`` and ``terminal.setCursorXPos`` now work correctly\n  with 0-based coordinates on POSIX (previously, you needed to use\n  1-based coordinates on POSIX for correct behaviour; the Windows behaviour\n  was always correct).\n\n- ``lineInfoObj`` now returns absolute path instead of project path.\n  It's used by ``lineInfo``, ``check``, ``expect``, ``require``, etc.\n\n- ``net.sendTo`` no longer returns an int and now raises an ``OSError``.\n- `threadpool`'s `await` and derivatives have been renamed to `blockUntil`\n  to avoid confusions with `await` from the `async` macro.\n\n\n\n## Library additions\n\n- ``re.split`` now also supports the ``maxsplit`` parameter for consistency\n  with ``strutils.split``.\n- Added ``system.toOpenArray`` in order to support zero-copy slicing\n  operations. This is currently not yet available for the JavaScript target.\n- Added ``getCurrentDir``, ``findExe``, ``cpDir`` and  ``mvDir`` procs to\n  ``nimscript``.\n- The ``times`` module now supports up to nanosecond time resolution when available.\n- Added the type ``times.Duration`` for representing fixed durations of time.\n- Added the proc ``times.convert`` for converting between different time units,\n  e.g days to seconds.\n- Added the proc ``algorithm.binarySearch[T, K]`` with the ```cmp``` parameter.\n- Added the proc ``algorithm.upperBound``.\n- Added inverse hyperbolic functions, ``math.arcsinh``, ``math.arccosh`` and ``math.arctanh`` procs.\n- Added cotangent, secant and cosecant procs ``math.cot``, ``math.sec`` and ``math.csc``; and their hyperbolic, inverse and inverse hyperbolic functions, ``math.coth``, ``math.sech``, ``math.csch``, ``math.arccot``, ``math.arcsec``, ``math.arccsc``, ``math.arccoth``, ``math.arcsech`` and ``math.arccsch`` procs.\n- Added the procs ``math.floorMod`` and ``math.floorDiv`` for floor based integer division.\n- Added the procs ``rationals.`div```, ``rationals.`mod```, ``rationals.floorDiv`` and ``rationals.floorMod`` for rationals.\n- Added the proc ``math.prod`` for product of elements in an openArray.\n- Added the proc ``parseBinInt`` to parse a binary integer from a string, which returns the value.\n- ``parseOct`` and ``parseBin`` in parseutils now also support the ``maxLen`` argument similar to ``parseHexInt``.\n- Added the proc ``flush`` for memory mapped files.\n- Added the ``MemMapFileStream``.\n- Added a simple interpreting event parser template ``eventParser`` to the ``pegs`` module.\n- Added ``macros.copyLineInfo`` to copy lineInfo from other node.\n- Added ``system.ashr`` an arithmetic right shift for integers.\n\n\n## Library changes\n\n- The stdlib module ``future`` has been renamed to ``sugar``.\n- ``macros.callsite`` is now deprecated. Since the introduction of ``varargs``\n  parameters this became unnecessary.\n\n- ``macros.astGenRepr``, ``macros.lispRepr`` and ``macros.treeRepr``\n  now escapes the content of string literals consistently.\n- ``macros.NimSym`` and ``macros.NimIdent`` is now deprecated in favor\n  of the more general ``NimNode``.\n- ``macros.getImpl`` now includes the pragmas of types, instead of omitting them.\n- ``macros.hasCustomPragma`` and ``macros.getCustomPragmaVal`` now\n  also support ``ref`` and ``ptr`` types, pragmas on types and variant\n  fields.\n- ``system.SomeReal`` is now called ``SomeFloat`` for consistency and\n  correctness.\n- ``algorithm.smartBinarySearch`` and ``algorithm.binarySearch`` is\n  now joined in ``binarySearch``. ``smartbinarySearch`` is now\n  deprecated.\n- The `terminal` module now exports additional procs for generating ANSI color\n  codes as strings.\n- Added the parameter ``val`` for the ``CritBitTree[int].inc`` proc.\n- An exception raised from a ``test`` block of ``unittest`` now shows its type in\n  error message.\n- The ``compiler/nimeval`` API was rewritten to simplify the \"compiler as an\n  API\". Using the Nim compiler and its VM as a scripting engine has never been\n  easier. See ``tests/compilerapi/tcompilerapi.nim`` for an example of how to\n  use the Nim VM in a native Nim application.\n- Added the parameter ``val`` for the ``CritBitTree[T].incl`` proc.\n- The proc ``tgamma`` was renamed to ``gamma``. ``tgamma`` is deprecated.\n- The ``pegs`` module now exports getters for the fields of its ``Peg`` and ``NonTerminal``\n  object types. ``Peg``s with child nodes now have the standard ``items`` and ``pairs``\n  iterators.\n- The ``accept`` socket procedure defined in the ``net`` module can now accept\n  a nil socket.\n\n\n## Language additions\n\n- Dot calls combined with explicit generic instantiations can now be written\n  as ``x.y[:z]`` which is transformed into ``y[z](x)`` by the parser.\n- ``func`` is now an alias for ``proc {.noSideEffect.}``.\n- In order to make ``for`` loops and iterators more flexible to use Nim now\n  supports so called \"for-loop macros\". See\n  the [manual](https://nim-lang.org/docs/manual.html#macros-for-loop-macros) for more details.\n  This feature enables a Python-like generic ``enumerate`` implementation.\n\n- Case statements can now be rewritten via macros. See the [manual](https://nim-lang.org/docs/manual.html#macros-case-statement-macros) for more information.\n  This feature enables custom pattern matchers.\n\n- the `typedesc` special type has been renamed to just `type`.\n- `static` and `type` are now also modifiers similar to `ref` and `ptr`.\n  They denote the special types `static[T]` and `type[T]`.\n- Forcing compile-time evaluation with `static` now supports specifying\n  the desired target type (as a concrete type or as a type class)\n- The `type` operator now supports checking that the supplied expression\n  matches an expected type constraint.\n\n\n## Language changes\n\n- Anonymous tuples with a single element can now be written as ``(1,)`` with a\n  trailing comma. The underlying AST is ``nnkTupleConstr(newLit 1)`` for this\n  example. ``nnkTupleConstr`` is a new node kind your macros need to be able\n  to deal with!\n- Indexing into a ``cstring`` for the JS target is now mapped\n  to ``charCodeAt``.\n- Assignments that would \"slice\" an object into its supertype are now prevented\n  at runtime. Use ``ref object`` with inheritance rather than ``object`` with\n  inheritance to prevent this issue.\n- The ``not nil`` type annotation now has to be enabled explicitly\n  via ``{.experimental: \"notnil\"}`` as we are still not pleased with how this\n  feature works with Nim's containers.\n- The parser now warns about inconsistent spacing around binary operators as\n  these can easily be confused with unary operators. This warning will likely\n  become an error in the future.\n- The ``'c`` and ``'C'`` suffix for octal literals is now deprecated to\n  bring the language in line with the standard library (e.g. ``parseOct``).\n- The dot style for import paths (e.g ``import path.to.module`` instead of\n  ``import path/to/module``) has been deprecated.\n\n- The `importcpp` pragma now allows importing the listed fields of generic\n  C++ types. Support for numeric parameters have also been added through\n  the use of `static[T]` types.\n  (#6415)\n\n- Native C++ exceptions can now be imported with `importcpp` pragma.\n  Imported exceptions can be raised and caught just like Nim exceptions.\n  More details in language manual.\n\n- ``nil`` for strings/seqs is finally gone. Instead the default value for\n  these is ``\"\" / @[]``. Use ``--nilseqs:on`` for a transition period.\n\n- Accessing the binary zero terminator in Nim's native strings\n  is now invalid. Internally a Nim string still has the trailing zero for\n  zero-copy interoperability with ``cstring``. Compile your code with the\n  new switch ``--laxStrings:on`` if you need a transition period.\n\n- The command syntax now supports keyword arguments after the first comma.\n\n- Thread-local variables can now be declared inside procs. This implies all\n  the effects of the ``global`` pragma.\n\n- Nim now supports the ``except`` clause in the export statement.\n\n- Range checked floating point types, for example ``range[0.0 .. Inf]``,\n  are now supported.\n- The ``{.this.}`` pragma has been deprecated. It never worked within generics and\n  we found the resulting code harder to read than the more explicit ``obj.field``\n  syntax.\n- \"Memory regions\" for pointer types have been deprecated, they were hardly used\n  anywhere. Note that this has **nothing** to do with the ``--gc:regions`` switch\n  of managing memory.\n\n- The exception hierarchy was slightly reworked, ``SystemError`` was renamed to\n  ``CatchableError`` and is the new base class for any exception that is guaranteed to\n  be catchable. This change should have minimal impact on most existing Nim code.\n\n\n### Tool changes\n\n- ``jsondoc2`` has been renamed ``jsondoc``, similar to how ``doc2`` was renamed\n  ``doc``. The old ``jsondoc`` can still be invoked with ``jsondoc0``.\n\n### Compiler changes\n\n- The undocumented ``#? braces`` parsing mode was removed.\n- The undocumented PHP backend was removed.\n\n- The VM's instruction count limit was raised to 3 million instructions in\n  order to support more complex computations at compile-time.\n\n- Support for hot code reloading has been implemented for the JavaScript\n  target. To use it, compile your code with `--hotCodeReloading:on` and use a\n  helper library such as LiveReload or BrowserSync.\n\n- A new compiler option `--cppCompileToNamespace` puts the generated C++ code\n  into the namespace \"Nim\" in order to avoid naming conflicts with existing\n  C++ code. This is done for all Nim code - internal and exported.\n\n- Added ``macros.getProjectPath`` and ``ospaths.putEnv`` procs to Nim's virtual\n  machine.\n\n- The ``deadCodeElim`` option is now always turned on and the switch has no\n  effect anymore, but is recognized for backwards compatibility.\n\n- ``experimental`` is now a pragma / command line switch that can enable specific\n  language extensions, it is not an all-or-nothing switch anymore.\n\n- Nintendo Switch was added as a new platform target. See [the compiler user guide](https://nim-lang.org/docs/nimc.html)\n  for more info.\n\n- macros.bindSym now capable to accepts not only literal string or string constant expression.\n  bindSym enhancement make it also can accepts computed string or ident node inside macros /\n  compile time functions / static blocks. Only in templates / regular code it retains it's\n  old behavior.\n  This new feature can be accessed via {.experimental: \"dynamicBindSym\".} pragma/switch.\n\n- On Posix systems the global system wide configuration is now put under ``/etc/nim/nim.cfg``,\n  it used to be ``/etc/nim.cfg``. Usually it does not exist, however.\n\n- On Posix systems the user configuration is now looked under ``$XDG_CONFIG_HOME/nim/nim.cfg``\n  (if ``XDG_CONFIG_HOME`` is not defined, then under ``~/.config/nim/nim.cfg``). It used to be\n  ``$XDG_CONFIG_DIR/nim.cfg`` (and ``~/.config/nim.cfg``).\n\n  Similarly, on Windows, the user configuration is now looked under ``%APPDATA%/nim/nim.cfg``.\n  This used to be ``%APPDATA%/nim.cfg``.\n\n\n## Bugfixes\n\n- Fixed \"constructor pragma leads to \"Most Vexing Parse\" in c++ code gen\"\n  ([#6837](https://github.com/nim-lang/Nim/issues/6837))\n\n- Fixed \"[RFC] newFileStream(string, FileMode) returns nil\"\n  ([#5588](https://github.com/nim-lang/Nim/issues/5588))\n- Fixed \"Search feature doesn't work on all docs pages \"\n  ([#7294](https://github.com/nim-lang/Nim/issues/7294))\n- Fixed \"Wrong comparison with empty string in version 0.18\"\n  ([#7291](https://github.com/nim-lang/Nim/issues/7291))\n- Fixed \"doc2 css troubles\"\n  ([#5293](https://github.com/nim-lang/Nim/issues/5293))\n- Fixed \"SIGSEGV when passing empty array to strutils format\"\n  ([#7293](https://github.com/nim-lang/Nim/issues/7293))\n- Fixed \"strip() weird behavior \"\n  ([#7159](https://github.com/nim-lang/Nim/issues/7159))\n- Fixed \"On Windows: When app type is GUI, error message can't be seen, about missing DLL file or procedure\"\n  ([#7212](https://github.com/nim-lang/Nim/issues/7212))\n- Fixed \"Compiler crash: multiple exception types with infix as\"\n  ([#7115](https://github.com/nim-lang/Nim/issues/7115))\n- Fixed \"C++ template object: Internal Error mangleRecFieldName\"\n  ([#6415](https://github.com/nim-lang/Nim/issues/6415))\n- Fixed \"Undefined Behavior when using const/let tables (Nim v0.18.1)\"\n  ([#7332](https://github.com/nim-lang/Nim/issues/7332))\n- Fixed \"Codegen: forward type declarations can be used more aggressively\"\n  ([#7339](https://github.com/nim-lang/Nim/issues/7339))\n- Fixed \"asyncfile getFileSize issue in linux\"\n  ([#7347](https://github.com/nim-lang/Nim/issues/7347))\n- Fixed \"Compiler manual is not that clear about int literal\"\n  ([#7304](https://github.com/nim-lang/Nim/issues/7304))\n- Fixed \"Bad error message when writing to a data structure within read-only object\"\n  ([#7335](https://github.com/nim-lang/Nim/issues/7335))\n- Fixed \"Compiler crash using @[int]\"\n  ([#7331](https://github.com/nim-lang/Nim/issues/7331))\n- Fixed \"Redefinition of object in C when a proc with sink param is defined.\"\n  ([#7364](https://github.com/nim-lang/Nim/issues/7364))\n- Fixed \"[Regression] Missing type declarations in C code if members are used in {.emit.}\"\n  ([#7363](https://github.com/nim-lang/Nim/issues/7363))\n- Fixed \"(regression) dereferencing pointer to incomplete type\"\n  ([#7392](https://github.com/nim-lang/Nim/issues/7392))\n- Fixed \"In nested try statements finally is not executed\"\n  ([#7414](https://github.com/nim-lang/Nim/issues/7414))\n- Fixed \"json.to doesn't work when Option[T] is inside an array\"\n  ([#7433](https://github.com/nim-lang/Nim/issues/7433))\n- Fixed \"https://nim-lang.org/docs/lib.html => If you are reading this you are missing nimblepkglist.js...\"\n  ([#7400](https://github.com/nim-lang/Nim/issues/7400))\n- Fixed \"json.to and Option[T] fails on JNull in JSON list literal\"\n  ([#6902](https://github.com/nim-lang/Nim/issues/6902))\n- Fixed \"inconsistent escaping of string literals\"\n  ([#7473](https://github.com/nim-lang/Nim/issues/7473))\n- Fixed \"streams.readLine(): string should raise IOError, but doesn't\"\n  ([#5281](https://github.com/nim-lang/Nim/issues/5281))\n\n- Fixed \"Duplicate definition in cpp codegen\"\n  ([#6986](https://github.com/nim-lang/Nim/issues/6986))\n- Fixed \"error at compile-time when case branch has implicit return\"\n  ([#7407](https://github.com/nim-lang/Nim/issues/7407))\n- Fixed \"Still some issues with Static[T]\"\n  ([#6843](https://github.com/nim-lang/Nim/issues/6843))\n- Fixed \"[regression] compiler/nimeval `execute(\"echo 1\")` => Error: cannot 'importc' variable at compile time\"\n  ([#7522](https://github.com/nim-lang/Nim/issues/7522))\n- Fixed \"Too many digits from float32 to string\"\n  ([#7252](https://github.com/nim-lang/Nim/issues/7252))\n- Fixed \"SIGSEGV: Illegal storage access. (Attempt to read from nil?)\"\n  ([#7528](https://github.com/nim-lang/Nim/issues/7528))\n- Fixed \"Catching C++ exceptions in Nim\"\n  ([#3571](https://github.com/nim-lang/Nim/issues/3571))\n- Fixed \"[RFC] Naming convention for in-place mutating procs\"\n  ([#7551](https://github.com/nim-lang/Nim/issues/7551))\n- Fixed \"Compiler SIGSEGV when trying to use invalid subrange type\"\n  ([#6895](https://github.com/nim-lang/Nim/issues/6895))\n- Fixed \"Internal error: invalid kind for first(tyTuple) with parallel block\"\n  ([#2779](https://github.com/nim-lang/Nim/issues/2779))\n- Fixed \"type checking issue when using an empty sequence embedded in a table\"\n  ([#3948](https://github.com/nim-lang/Nim/issues/3948))\n- Fixed \"Deprecate ``callsite`` builtin\"\n  ([#7369](https://github.com/nim-lang/Nim/issues/7369))\n- Fixed \"JS codegen - indexing into cstring.\"\n  ([#4470](https://github.com/nim-lang/Nim/issues/4470))\n\n- Fixed \"strutils.formatEng relies on a distinction of \"\" and nil string\"\n  ([#6205](https://github.com/nim-lang/Nim/issues/6205))\n- Fixed \"timeToTimeInfo issue\"\n  ([#3678](https://github.com/nim-lang/Nim/issues/3678))\n- Fixed \"checking object type for a pragma is not possible\"\n  ([#7451](https://github.com/nim-lang/Nim/issues/7451))\n- Fixed \"nnkBracketExpr.newTree now returns tuple of NimNodes breaking newTree chaining\"\n  ([#7610](https://github.com/nim-lang/Nim/issues/7610))\n\n- Fixed \"\"newNilLitNode\" printed when some objects' AST is dumped shold be \"newNilLit\"\"\n  ([#7595](https://github.com/nim-lang/Nim/issues/7595))\n\n- Fixed \"string.replace() should throw an error when used with an empty string\"\n  ([#7507](https://github.com/nim-lang/Nim/issues/7507))\n- Fixed \"Threadpool `awaitAny()` problem on macOS\"\n  ([#7638](https://github.com/nim-lang/Nim/issues/7638))\n- Fixed \"TLineInfo on windows 32bit\"\n  ([#7654](https://github.com/nim-lang/Nim/issues/7654))\n- Fixed \"Object slicing can bite our arses\"\n  ([#7637](https://github.com/nim-lang/Nim/issues/7637))\n- Fixed \"A warning for unused but conflicting procs would be nice\"\n  ([#6393](https://github.com/nim-lang/Nim/issues/6393))\n- Fixed \"Using var return types will result in segfaults in some cases\"\n  ([#5113](https://github.com/nim-lang/Nim/issues/5113))\n- Fixed \"Borrowing for ``var T`` and ``lent T`` to improve Nim's memory safety\"\n  ([#7373](https://github.com/nim-lang/Nim/issues/7373))\n- Fixed \"Documentation/implementation mismatch for --genScript flag\"\n  ([#802](https://github.com/nim-lang/Nim/issues/802))\n- Fixed \"httpclient.generateHeaders() not setting Content-Length if body.len=0\"\n  ([#7680](https://github.com/nim-lang/Nim/issues/7680))\n- Fixed \"generic object descended from generic ref object sigmatch bug\"\n  ([#7600](https://github.com/nim-lang/Nim/issues/7600))\n- Fixed \"array construction of ptr generic object with subtype relation failed\"\n  ([#7601](https://github.com/nim-lang/Nim/issues/7601))\n- Fixed \"ambiguously typed/tuple combination with auto result type leads to a compile-time crash with SIGSEGV\"\n  ([#7663](https://github.com/nim-lang/Nim/issues/7663))\n- Fixed \"nim --linedir:on c file segfaults\"\n  ([#7730](https://github.com/nim-lang/Nim/issues/7730))\n- Fixed \"Better compiler warning/error messages\"\n  ([#7749](https://github.com/nim-lang/Nim/issues/7749))\n\n- Fixed \"Issues with finish.exe\"\n  ([#7747](https://github.com/nim-lang/Nim/issues/7747))\n\n- Fixed \"changed \"encodeUrl\" in lib/pure/uri.nim.\"\n  ([#7700](https://github.com/nim-lang/Nim/issues/7700))\n- Fixed \"Unexpected import required\"\n  ([#7738](https://github.com/nim-lang/Nim/issues/7738))\n- Fixed \"Strange interaction of add for string without explicit initialization\"\n  ([#7766](https://github.com/nim-lang/Nim/issues/7766))\n- Fixed \"Command invocation syntax doesn't work with unary operators\"\n  ([#7582](https://github.com/nim-lang/Nim/issues/7582))\n- Fixed \"Command invocation syntax doesn't work with unary operators\"\n  ([#7582](https://github.com/nim-lang/Nim/issues/7582))\n- Fixed \"3x performance regression\"\n  ([#7743](https://github.com/nim-lang/Nim/issues/7743))\n- Fixed \"seq is still nil in compile time\"\n  ([#7774](https://github.com/nim-lang/Nim/issues/7774))\n- Fixed \"Compiler segfault on sink proc for type with destructor under special condition\"\n  ([#7757](https://github.com/nim-lang/Nim/issues/7757))\n- Fixed \"Windows getch() does not correctly account for control keys\"\n  ([#7764](https://github.com/nim-lang/Nim/issues/7764))\n- Fixed \"thread local variable `threadvar` not working as expected (differs from C++ thread_local and D static)\"\n  ([#7565](https://github.com/nim-lang/Nim/issues/7565))\n- Fixed \"Setting a timeout causes assertion failures in httpclient\"\n  ([#2753](https://github.com/nim-lang/Nim/issues/2753))\n- Fixed \"Can't convert expression when surrounded with parens using %*\"\n  ([#7817](https://github.com/nim-lang/Nim/issues/7817))\n- Fixed \"Line number missing in stdlib trace\"\n  ([#6832](https://github.com/nim-lang/Nim/issues/6832))\n- Fixed \"Filter skips lines with only single character\"\n  ([#7855](https://github.com/nim-lang/Nim/issues/7855))\n- Fixed \"[regression] nimscript.task crash the compiler\"\n  ([#7696](https://github.com/nim-lang/Nim/issues/7696))\n- Fixed \"IndexError in streams.readStr()\"\n  ([#7877](https://github.com/nim-lang/Nim/issues/7877))\n- Fixed \"IndexError in streams.readStr()\"\n  ([#7877](https://github.com/nim-lang/Nim/issues/7877))\n- Fixed \"generic \"Error: cannot instantiate: 'T'\" with overload(regression)\"\n  ([#7883](https://github.com/nim-lang/Nim/issues/7883))\n- Fixed \"marshal.store generates invalid JSON\"\n  ([#7881](https://github.com/nim-lang/Nim/issues/7881))\n- Fixed \"inconsistent internal representation of generic objects array construction\"\n  ([#7818](https://github.com/nim-lang/Nim/issues/7818))\n- Fixed \"There's no `$` for openArray\"\n  ([#7940](https://github.com/nim-lang/Nim/issues/7940))\n- Fixed \"array and openarray arg vs. ptr/ref generic polymorphic issue\"\n  ([#7906](https://github.com/nim-lang/Nim/issues/7906))\n- Fixed \"Yield in try generate stack error \"\n  ([#7969](https://github.com/nim-lang/Nim/issues/7969))\n- Fixed \"Bad codegen (runtime crash) when catching exceptions in a proc with no stack trace\"\n  ([#7982](https://github.com/nim-lang/Nim/issues/7982))\n- Fixed \"`$` doesn't work for CritBitTree[void]\"\n  ([#7987](https://github.com/nim-lang/Nim/issues/7987))\n- Fixed \"Assertion  at runtime with await and json.to()\"\n  ([#7985](https://github.com/nim-lang/Nim/issues/7985))\n- Fixed \"[critbits[int]] When using `inc` to add new keys, only the first added key gets the value 1\"\n  ([#7990](https://github.com/nim-lang/Nim/issues/7990))\n- Fixed \"Error: obsolete usage of 'defined', use 'declared' instead\"\n  ([#7997](https://github.com/nim-lang/Nim/issues/7997))\n\n- Fixed \"C++ codegen: importcpp breaks for generic types.\"\n  ([#7653](https://github.com/nim-lang/Nim/issues/7653))\n- Fixed \"Bad line info in async code\"\n  ([#6803](https://github.com/nim-lang/Nim/issues/6803))\n- Fixed \"tmacrostmt immediate pragma cannot be removed\"\n  ([#5930](https://github.com/nim-lang/Nim/issues/5930))\n- Fixed \"parseBinInt\"\n  ([#8018](https://github.com/nim-lang/Nim/issues/8018))\n- Fixed \"RFC: Import Module Namespaces\"\n  ([#7250](https://github.com/nim-lang/Nim/issues/7250))\n- Fixed \"All symbols in concepts should be open by default\"\n  ([#7222](https://github.com/nim-lang/Nim/issues/7222))\n- Fixed \"static[T] issue with default arguments\"\n  ([#6928](https://github.com/nim-lang/Nim/issues/6928))\n- Fixed \"Compiler crash when casting a proc with asm statement to a pointer\"\n  ([#8076](https://github.com/nim-lang/Nim/issues/8076))\n- Fixed \"[regression]: nim doc <program.nim> produces <.html> instead of <program.html>\"\n  ([#8097](https://github.com/nim-lang/Nim/issues/8097))\n\n- Fixed \"[Regression] times.format interferes with strformat\"\n  ([#8100](https://github.com/nim-lang/Nim/issues/8100))\n- Fixed \"Regression: SIGSEGV caused by using `is` with string\"\n  ([#8129](https://github.com/nim-lang/Nim/issues/8129))\n- Fixed \"uninitialized procs variables are not nil at compile time\"\n  ([#6689](https://github.com/nim-lang/Nim/issues/6689))\n- Fixed \"unixToNativePath cause IndexError with Empty string or \".\"\"\n  ([#8173](https://github.com/nim-lang/Nim/issues/8173))\n\n- Fixed \"Octal int literal behavior differs from `parseOct` - change `parseOct`?\"\n  ([#8082](https://github.com/nim-lang/Nim/issues/8082))\n\n- Fixed \"[travis] flaky test: \"No output has been received\" caused by no prompt on \"already exists. Overwrite?\" after `nimble install`\"\n  ([#8227](https://github.com/nim-lang/Nim/issues/8227))\n\n- Fixed \"noSideEffect in os module\"\n  ([#5880](https://github.com/nim-lang/Nim/issues/5880))\n- Fixed \"missing `ospaths.absolutePath` function to get absolute path from a path\"\n  ([#8174](https://github.com/nim-lang/Nim/issues/8174))\n- Fixed \"Render bug with prefix and implicit string/cstring conversion\"\n  ([#8287](https://github.com/nim-lang/Nim/issues/8287))\n\n- Fixed \"ospaths.isAbsolute: uncovering out of bound bugs after updating to 0.18.1 from 0.18.0: empty string and nil string now checked for out of bound errors\"\n  ([#8251](https://github.com/nim-lang/Nim/issues/8251))\n- Fixed \"`Error: cannot 'importc' variable at compile time` shows wrong context\"\n  ([#7405](https://github.com/nim-lang/Nim/issues/7405))\n- Fixed \"[regression] [times.format] Error: attempting to call undeclared routine: 'format'\"\n  ([#8273](https://github.com/nim-lang/Nim/issues/8273))\n- Fixed \"`htmlparser.untilElementEnd` is not GC-safe\"\n  ([#8338](https://github.com/nim-lang/Nim/issues/8338))\n- Fixed \"`nim check` internal error\"\n  ([#8230](https://github.com/nim-lang/Nim/issues/8230))\n- Fixed \"`nim doc` fails when source file contains `doAssertRaises` in isMainModule\"\n  ([#8223](https://github.com/nim-lang/Nim/issues/8223))\n- Fixed \"Windows: can't compile with var name \"far\"\"\n  ([#8345](https://github.com/nim-lang/Nim/issues/8345))\n- Fixed \"Render bug: procs with single if statement get incorrent indentation\"\n  ([#8343](https://github.com/nim-lang/Nim/issues/8343))\n- Fixed \"json.nim macro `to` does not support objects with distinct types\"\n  ([#8037](https://github.com/nim-lang/Nim/issues/8037))\n- Fixed \"macros.hasCustomPragma() crashes when working with variant fields\"\n  ([#8371](https://github.com/nim-lang/Nim/issues/8371))\n- Fixed \"await inside stmtListExpr inside a case stmt crashes compiler\"\n  ([#8399](https://github.com/nim-lang/Nim/issues/8399))\n\n- Fixed \"[os] failed operations (eg existsOrCreateDir) should show runtime context (eg file/dir) it failed for\"\n  ([#8391](https://github.com/nim-lang/Nim/issues/8391))\n\n- Fixed \"[ospaths] ospaths.nim says OSX is FileSystemCaseSensitive:true but should be false ; cmpPaths seems wrong\"\n  ([#8349](https://github.com/nim-lang/Nim/issues/8349))\n- Fixed \"excessiveStackTrace:on shows non-absolute file in stacktrace\"\n  ([#7492](https://github.com/nim-lang/Nim/issues/7492))\n\n- Fixed \"`nim doc foo` generates stuff that should be under a .gitignore'd directory\"\n  ([#8323](https://github.com/nim-lang/Nim/issues/8323))\n- Fixed \"type mismatch shows wrong type for union types T1|T2|T3|T4: only keeps T1 or T2, discards rest\"\n  ([#8434](https://github.com/nim-lang/Nim/issues/8434))\n- Fixed \"devel branch encodings.convert broken on Windows\"\n  ([#8468](https://github.com/nim-lang/Nim/issues/8468))\n- Fixed \"--app:gui gives an error on osx.\"\n  ([#2576](https://github.com/nim-lang/Nim/issues/2576))\n- Fixed \"non ordinal enums are not allowed in set constructor\"\n  ([#8425](https://github.com/nim-lang/Nim/issues/8425))\n- Fixed \"[nimweb] ./koch web -o:/tmp/d13/ => `o` is actually unused and docs output dir hardcoded regardless of o\"\n  ([#8419](https://github.com/nim-lang/Nim/issues/8419))\n- Fixed \"seq/string initialized with `add` or `setLen` being deallocated\"\n  ([#7833](https://github.com/nim-lang/Nim/issues/7833))\n- Fixed \"alloc fails after 4GB\"\n  ([#7894](https://github.com/nim-lang/Nim/issues/7894))\n- Fixed \"[feature request] macros.bindSym can accept computed string\"\n  ([#7827](https://github.com/nim-lang/Nim/issues/7827))\n- Fixed \"tfragment_alloc.nim (which allocates 4GB) often makes appveyor fail with out of memory\"\n  ([#8509](https://github.com/nim-lang/Nim/issues/8509))\n- Fixed \"`echo` not thread safe on windows, causing [appveyor] flaky test: Failure: reOutputsDiffer in tforstmt.nim\"\n  ([#8511](https://github.com/nim-lang/Nim/issues/8511))\n- Fixed \"./koch xz doesn't check for dirty work tree\"\n  ([#7292](https://github.com/nim-lang/Nim/issues/7292))\n- Fixed \"non ordinal enums are not allowed in set constructor\"\n  ([#8425](https://github.com/nim-lang/Nim/issues/8425))\n- Fixed \"bad example in https://nim-lang.org/docs/docgen.html\"\n  ([#8215](https://github.com/nim-lang/Nim/issues/8215))\n- Fixed \"Ability to set a NimNode's lineinfo\"\n  ([#5617](https://github.com/nim-lang/Nim/issues/5617))\n- Fixed \"winlean.nim has wrong definition for moveFileExA\"\n  ([#8421](https://github.com/nim-lang/Nim/issues/8421))\n- Fixed \"shr operator should keep the sign bit on signed types.\"\n  ([#6255](https://github.com/nim-lang/Nim/issues/6255))\n- Fixed \"proposal (with implementation): `undistinct(T)`\"\n  ([#8519](https://github.com/nim-lang/Nim/issues/8519))\n- Fixed \"`.cache/projectname` pollutes `.cache` - put in `.cache/Nim/projectname` instead\"\n  ([#8599](https://github.com/nim-lang/Nim/issues/8599))\n\n- Fixed \"Iterating closure iterator in nested function is empty\"\n  ([#8550](https://github.com/nim-lang/Nim/issues/8550))\n- Fixed \"[TODO] [feature] Nim error messages should show line contents, would save lots of debugging time\"\n  ([#7586](https://github.com/nim-lang/Nim/issues/7586))\n- Fixed \"Converter: {lit} parameter constraint is not respected in implicit conversion\"\n  ([#7520](https://github.com/nim-lang/Nim/issues/7520))\n- Fixed \"`mapIt` still can't be used with `openArray` even after #8543, #8567: fails during bootstrap\"\n  ([#8577](https://github.com/nim-lang/Nim/issues/8577))\n- Fixed \"Config should be in its own directory\"\n  ([#8653](https://github.com/nim-lang/Nim/issues/8653))\n- Fixed \"sequtils.toSeq produces the sequence from the iterator twice if compiles(iter.len) == true\"\n  ([#7187](https://github.com/nim-lang/Nim/issues/7187))\n- Fixed \"`$` for Option[string] types should double-quote the output\"\n  ([#8658](https://github.com/nim-lang/Nim/issues/8658))\n\n- Fixed \"Config should be in its own directory\"\n  ([#8653](https://github.com/nim-lang/Nim/issues/8653))\n- Fixed \"[feature request] compile time check for experimental features\"\n  ([#8644](https://github.com/nim-lang/Nim/issues/8644))\n- Fixed \"Changes in typedesc reforms\"\n  ([#8126](https://github.com/nim-lang/Nim/issues/8126))\n- Fixed \"json.% regression\"\n  ([#8716](https://github.com/nim-lang/Nim/issues/8716))\n- Fixed \"`nim doc2 --project -o:doc/ ` cannot find files in subdirectories\"\n  ([#8218](https://github.com/nim-lang/Nim/issues/8218))\n- Fixed \"`onFailedAssert` does not affect `doAssert`\"\n  ([#8719](https://github.com/nim-lang/Nim/issues/8719))\n\n- Fixed \"[travis] [async] flaky test: tests/async/t7758.nim\"\n  ([#8756](https://github.com/nim-lang/Nim/issues/8756))\n- Fixed \"float literals are treated differently between manual and compiler\"\n  ([#8766](https://github.com/nim-lang/Nim/issues/8766))\n- Fixed \"[cmdline] [minor] `--hint.foo:on` as alias for `--hint[foo]:on`: avoids edge cases with `[` that needs to be escaped on cmd line + other places\"\n  ([#8739](https://github.com/nim-lang/Nim/issues/8739))\n\n- Fixed \"Duplicate member error for union types\"\n  ([#8781](https://github.com/nim-lang/Nim/issues/8781))\n- Fixed \"nim c compiler/nimblecmd.nim fails:  Error: type mismatch: got <StringTableRef, string>\"\n  ([#8776](https://github.com/nim-lang/Nim/issues/8776))\n- Fixed \"Compiler crash with $, converter and generics\"\n  ([#4766](https://github.com/nim-lang/Nim/issues/4766))\n- Fixed \"[unidecode] Fix the `unidecode` example\"\n  ([#8768](https://github.com/nim-lang/Nim/issues/8768))\n- Fixed \"[unidecode] Make `loadUnidecodeTable` use the path to unicode.dat on user's system by default\"\n  ([#8767](https://github.com/nim-lang/Nim/issues/8767))\n- Fixed \"marshal.load() regression?\"\n  ([#7854](https://github.com/nim-lang/Nim/issues/7854))\n- Fixed \"[unidecode] Fix the `unidecode` example\"\n  ([#8768](https://github.com/nim-lang/Nim/issues/8768))\n- Fixed \"Converter applied when it should not be\"\n  ([#8049](https://github.com/nim-lang/Nim/issues/8049))\n- Fixed \"Pure enums allow using the same name but allow nonqualification with quirky behaviour\"\n  ([#8066](https://github.com/nim-lang/Nim/issues/8066))\n\n- Fixed \"Correctly redirect stderr when using osproc's posix_spawn backend\"\n  ([#8624](https://github.com/nim-lang/Nim/issues/8624))\n- Fixed \"`errorStream` doesn't seem to work\"\n  ([#8442](https://github.com/nim-lang/Nim/issues/8442))\n- Fixed \"Nested template: SIGSEGV at compile-time\"\n  ([#8052](https://github.com/nim-lang/Nim/issues/8052))\n- Fixed \"`Error: undeclared identifier: '|'` when using `|` inside a `runnableExamples:`\"\n  ([#8694](https://github.com/nim-lang/Nim/issues/8694))\n- Fixed \"runnableExamples doesn't work at module level\"\n  ([#8641](https://github.com/nim-lang/Nim/issues/8641))\n- Fixed \"[runnableExamples] `Hint: operation successful: runnableExamples` even though operation failed: compile error is ignored\"\n  ([#8831](https://github.com/nim-lang/Nim/issues/8831))\n- Fixed \"`runnableExamples` don't have own scope for imports\"\n  ([#7285](https://github.com/nim-lang/Nim/issues/7285))\n- Fixed \"`nim check` segfaults\"\n  ([#8028](https://github.com/nim-lang/Nim/issues/8028))\n- Fixed \"addQuoted gives unquoted result on cstring (works on string)\"\n  ([#8847](https://github.com/nim-lang/Nim/issues/8847))\n- Fixed \"[nimscript] exception handling broken: `except BaseClass` doesn't work\"\n  ([#8740](https://github.com/nim-lang/Nim/issues/8740))\n- Fixed \"Unary `.` operator can't be parsed\"\n  ([#8797](https://github.com/nim-lang/Nim/issues/8797))\n- Fixed \"system.on_raise works only for \"single level\"\"\n  ([#1652](https://github.com/nim-lang/Nim/issues/1652))\n- Fixed \"Final facelifiting nimrod -> nim\"\n  ([#2032](https://github.com/nim-lang/Nim/issues/2032))\n- Fixed \"marshal: document usage of \"to\"\"\n  ([#3150](https://github.com/nim-lang/Nim/issues/3150))\n- Fixed \"Name conflict between template and proc parameter\"\n  ([#4750](https://github.com/nim-lang/Nim/issues/4750))\n- Fixed \"Operator overloading bug with unittest check macro\"\n  ([#5252](https://github.com/nim-lang/Nim/issues/5252))\n- Fixed \"nim check crash due to typo\"\n  ([#5745](https://github.com/nim-lang/Nim/issues/5745))\n- Fixed \"Regression (?): ICE in transformImportAs\"\n  ([#8852](https://github.com/nim-lang/Nim/issues/8852))\n- Fixed \"generic match error\"\n  ([#1156](https://github.com/nim-lang/Nim/issues/1156))\n- Fixed \"Adding a mention of the `unsafeAddr` operator to the Nim manual\"\n  ([#5038](https://github.com/nim-lang/Nim/issues/5038))\n- Fixed \"`using` types should have higher precedence\"\n  ([#8565](https://github.com/nim-lang/Nim/issues/8565))\n- Fixed \"Add noSignalHandler documentation and examples\"\n  ([#8224](https://github.com/nim-lang/Nim/issues/8224))\n- Fixed \"`-d:identifier` is case insensitive (not partially case insensitive)\"\n  ([#7506](https://github.com/nim-lang/Nim/issues/7506))\n- Fixed \"addQuitProc argument requires {.noconv.} not documented\"\n  ([#5794](https://github.com/nim-lang/Nim/issues/5794))\n- Fixed \"Compilation error does not point to the actual wrong parameter\"\n  ([#8043](https://github.com/nim-lang/Nim/issues/8043))\n- Fixed \"Clean up examples\"\n  ([#7725](https://github.com/nim-lang/Nim/issues/7725))\n- Fixed \"Documentation footer timestamp is not UTC\"\n  ([#7305](https://github.com/nim-lang/Nim/issues/7305))\n- Fixed \"Regression: compiler stack overflow in transformIteratorBody/lowerStmtListExprs\"\n  ([#8851](https://github.com/nim-lang/Nim/issues/8851))\n- Fixed \"The `writeStackTrace` proc listed twice in docs\"\n  ([#3655](https://github.com/nim-lang/Nim/issues/3655))\n- Fixed \"Error: unhandled exception: n.kind == nkStmtListExpr  [AssertionError]\"\n  ([#8243](https://github.com/nim-lang/Nim/issues/8243))\n- Fixed \"The `writeStackTrace` proc listed twice in docs\"\n  ([#3655](https://github.com/nim-lang/Nim/issues/3655))\n- Fixed \"Regression: stack trace line numbers are messed up for asserts\"\n  ([#8928](https://github.com/nim-lang/Nim/issues/8928))\n\n- Fixed \"Regression bug in lines()\"\n  ([#8961](https://github.com/nim-lang/Nim/issues/8961))\n- Fixed \"Core dump for RTree module -- regression\"\n  ([#8883](https://github.com/nim-lang/Nim/issues/8883))\n\n- Fixed \"`system.cmp` returns different results for string on different operating systems\"\n  ([#8930](https://github.com/nim-lang/Nim/issues/8930))\n- Fixed \"scanf Invalid node kind nnkBracketExpr for macros.`$`\"\n  ([#8925](https://github.com/nim-lang/Nim/issues/8925))\n\n- Fixed \"Regression bug in lines()\"\n  ([#8961](https://github.com/nim-lang/Nim/issues/8961))\n- Fixed \"Typetraits arity: off-by-one for arrays\"\n  ([#8965](https://github.com/nim-lang/Nim/issues/8965))\n- Fixed \"`strutils.nim(1533, 29) Error: illegal conversion from '-1' to '[0..9223372036854775807]'` with strutils.replace on empty string at CT\"\n  ([#8911](https://github.com/nim-lang/Nim/issues/8911))\n- Fixed \"Iterators in combination with closures misbehave\"\n  ([#3837](https://github.com/nim-lang/Nim/issues/3837))\n- Fixed \"procCall is not documented\"\n  ([#4329](https://github.com/nim-lang/Nim/issues/4329))\n- Fixed \"scanf Invalid node kind nnkBracketExpr for macros.`$`\"\n  ([#8925](https://github.com/nim-lang/Nim/issues/8925))\n- Fixed \"Add exports section to documentation generator\"\n  ([#1616](https://github.com/nim-lang/Nim/issues/1616))\n- Fixed \"Improve error message for redefinitions\"\n  ([#447](https://github.com/nim-lang/Nim/issues/447))\n- Fixed \"[minor] operator symbols in anchor text disappear, causing anchor clashes\"\n  ([#7500](https://github.com/nim-lang/Nim/issues/7500))\n\n- Fixed \"Incorrect executable name of the C compiler when performing crosscompilation\"\n  ([#8081](https://github.com/nim-lang/Nim/issues/8081))\n- Fixed \"[ICE/regression] when proc with var return type interacting with method\"\n  ([#9076](https://github.com/nim-lang/Nim/issues/9076))", "tags": ["nim", "python"], "published_at": "2019-10-22", "id": 12}, {"author_name":"xmonader", "author_email":"xmonader@gmail.com","author_image":"me.jpg","title": "Nim partners with Status.im", "slug": "nim-partners-with-status", "content": "\n<a href=\"{{ site.baseurl }}/assets/news/images/status/Status-Nim-partnership.png\">\n  <img src=\"{{ site.baseurl }}/assets/news/images/status/Status-Nim-partnership.png\" alt=\"Status + Nim\" style=\"width:100%\"/>\n</a>\n\nWe're incredibly excited to announce the new partnership between\n[Status](https://status.im/)\nand Nim. Status is developing an open source mobile DApp\nbrowser and messenger for Ethereum.\n\nThe Status team has chosen the Nim programming language as a base for the\nimplementation of a brand new research project: a sharding client for Ethereum.\nThe project is named Nimbus, it is open source and available on\n[GitHub](https://github.com/status-im/nimbus). You can read more about this\nproject as well as the reasons why Status chose Nim in the corresponding\n[Status announcement article](https://our.status.im/status-partners-with-the-team-behind-the-programming-language-nim/).\n\nAs the developers of Nim we are very proud to see it used for this\nproject. We hope that this partnership will encourage other developers to\nadopt Nim for their project and that it will give software companies the\nconfidence to develop products using Nim.\n\n## The Partnership\n\nThe partnership will see Status support the Nim team with funding and resources\nneeded to stay focused on the development of the Nim programming language.\nThe Nim team has so far received\n[many generous donations](https://nim-lang.org/sponsors.html) from other software\nteams as well as from independent developers who believe in the project.\nThese donations have given us the ability to do many things such as\npay for the hosting costs of our servers, organize a Nim stand at the FOSDEM\nconference and spend our free time developing Nim and related projects.\n\nUnfortunately the donations are not currently enough for any of us to commit\nto working on Nim full-time. With Status' help this is no longer the case.\nWe will now be able to stay focused on the development of the\nNim programming language. In addition, we plan to hire at least 2 full-time\ndevelopers. These developers will be tasked with fixing bugs, responding to\nissues, and of course developing the compiler, the standard library and the\ntooling.\n\nDespite this partnership, Nim remains an independent project, with plans\nbeing discussed in the open on GitHub, our forum and on IRC. Decisions are\nas usual left to our BDFL, Andreas Rumpf, and will remain that way for the\nforeseeable future.\n\n## Our Roadmap\n\nOur primary goal is to release Nim version 1.0.0, which signals our long\noverdue commitment to a stable language and standard library that will\npreserve backwards compatibility for years to come.\n\nWe won't make any commitments to a release date. But a detailed milestone\ntracking all the issues that need to be resolved for v1.0.0 is available\n[here](https://github.com/nim-lang/Nim/milestone/2).\n\nWith Status' support our development towards version 1.0.0 will accelerate\nrapidly. We will also have more man-power to handle the recently increased\nactivity on our issue tracker.\n\n## Beyond the roadmap\n\nBeyond our current roadmap we would like to encourage our community to\nget more involved in the development of Nim. We're currently considering a\ngrants program for Nim, similar to Google Summer of Code, where we will\nhire developers to work on specific Nim-related projects.\n\nSome examples for these grants:\n\n* Improve the ``nimsuggest`` tool to support the common \"language server\n  protocol\" that every text editor and IDE is starting to speak.\n* Improve Nim's package manager, Nimble, to support reproducible builds.\n* Improve Nim's tooling so that the result of macro expansions becomes easier to\n  understand and follow.\n\nWe are extremely excited to continue developing Nim with renewed vigour and\nare very thankful for the generous support from the Status team.\n\nFor more information and questions, join us on this forum thread:\n[https://forum.nim-lang.org/t/4113](https://forum.nim-lang.org/t/4113).", "content_with_meta": "---\ntitle: \"Nim partners with Status.im\"\nauthor: Nim Team\nexcerpt: \"We're incredibly excited to announce the new partnership between Status and Nim.\"\ntags: nim, python\n---\n\n<a href=\"{{ site.baseurl }}/assets/news/images/status/Status-Nim-partnership.png\">\n  <img src=\"{{ site.baseurl }}/assets/news/images/status/Status-Nim-partnership.png\" alt=\"Status + Nim\" style=\"width:100%\"/>\n</a>\n\nWe're incredibly excited to announce the new partnership between\n[Status](https://status.im/)\nand Nim. Status is developing an open source mobile DApp\nbrowser and messenger for Ethereum.\n\nThe Status team has chosen the Nim programming language as a base for the\nimplementation of a brand new research project: a sharding client for Ethereum.\nThe project is named Nimbus, it is open source and available on\n[GitHub](https://github.com/status-im/nimbus). You can read more about this\nproject as well as the reasons why Status chose Nim in the corresponding\n[Status announcement article](https://our.status.im/status-partners-with-the-team-behind-the-programming-language-nim/).\n\nAs the developers of Nim we are very proud to see it used for this\nproject. We hope that this partnership will encourage other developers to\nadopt Nim for their project and that it will give software companies the\nconfidence to develop products using Nim.\n\n## The Partnership\n\nThe partnership will see Status support the Nim team with funding and resources\nneeded to stay focused on the development of the Nim programming language.\nThe Nim team has so far received\n[many generous donations](https://nim-lang.org/sponsors.html) from other software\nteams as well as from independent developers who believe in the project.\nThese donations have given us the ability to do many things such as\npay for the hosting costs of our servers, organize a Nim stand at the FOSDEM\nconference and spend our free time developing Nim and related projects.\n\nUnfortunately the donations are not currently enough for any of us to commit\nto working on Nim full-time. With Status' help this is no longer the case.\nWe will now be able to stay focused on the development of the\nNim programming language. In addition, we plan to hire at least 2 full-time\ndevelopers. These developers will be tasked with fixing bugs, responding to\nissues, and of course developing the compiler, the standard library and the\ntooling.\n\nDespite this partnership, Nim remains an independent project, with plans\nbeing discussed in the open on GitHub, our forum and on IRC. Decisions are\nas usual left to our BDFL, Andreas Rumpf, and will remain that way for the\nforeseeable future.\n\n## Our Roadmap\n\nOur primary goal is to release Nim version 1.0.0, which signals our long\noverdue commitment to a stable language and standard library that will\npreserve backwards compatibility for years to come.\n\nWe won't make any commitments to a release date. But a detailed milestone\ntracking all the issues that need to be resolved for v1.0.0 is available\n[here](https://github.com/nim-lang/Nim/milestone/2).\n\nWith Status' support our development towards version 1.0.0 will accelerate\nrapidly. We will also have more man-power to handle the recently increased\nactivity on our issue tracker.\n\n## Beyond the roadmap\n\nBeyond our current roadmap we would like to encourage our community to\nget more involved in the development of Nim. We're currently considering a\ngrants program for Nim, similar to Google Summer of Code, where we will\nhire developers to work on specific Nim-related projects.\n\nSome examples for these grants:\n\n* Improve the ``nimsuggest`` tool to support the common \"language server\n  protocol\" that every text editor and IDE is starting to speak.\n* Improve Nim's package manager, Nimble, to support reproducible builds.\n* Improve Nim's tooling so that the result of macro expansions becomes easier to\n  understand and follow.\n\nWe are extremely excited to continue developing Nim with renewed vigour and\nare very thankful for the generous support from the Status team.\n\nFor more information and questions, join us on this forum thread:\n[https://forum.nim-lang.org/t/4113](https://forum.nim-lang.org/t/4113).", "tags": ["nim", "python"], "published_at": "2019-11-22", "id": 13}, {"author_name":"xmonader", "author_email":"xmonader@gmail.com","author_image":"me.jpg","title": "Hacktoberfest with Nim", "slug": "hacktoberfest-with-nim", "content": "\n[Hacktoberfest](https://hacktoberfest.digitalocean.com/) is an annual event happening in October which celebrates open source software and encourages meaningful contributions to the open source ecosystem.\n\nTo win a T-shirt, you must sign up on the [Hacktoberfest site](https://hacktoberfest.digitalocean.com/) and make five pull requests to any repo on Github by the end of October.\nEven if you don't manage to make five pull requests, you win Hacktoberfest stickers.\n\nNim would like to encourage you to participate in Hacktoberfest by contributing to the [Nim repo](https://github.com/nim-lang/nim) or any other Nim-related repos.\n\n\n\n# How can you help?\n\n* bug-fixing\n* improving documentation\n* writing a library\n\n\n\n## Bug fixing\n\n[Nim repo](https://github.com/nim-lang/nim) has more than 1400 open issues, which might be overwhelming to start.\nHere are some categories you might find interesting:\n\n* Why don't you start with some of [easy issues](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3AEasy)?\n* You can help with [cleanup](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3ACleanup).\n* You don't want to write code? Plenty of issues involve [documentation](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3ADocumentation).\n* Everybody uses stdlib. How about fixing one of the more than 200 issues in the [stdlib](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3AStdlib)?\n* You want to earn some money while fixing bugs? Here are the issues with a [bounty](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3Abounty).\n* What are our priorities? Take a look at [high priority issues](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3A\"High+Priority\").\n\n\n\n## Improving documentation\n\nPoor documentation is often mentioned when people discuss Nim.\nLet's make it better together!\n\nBased on [this research](https://gist.github.com/GULPF/6d49e74af9992f8fc65476a9264488a0), the most used modules are: strutils, os, tables, math, sequtils, macros, times, unittest and json -- improving these would be beneficial to most people, but feel free to choose any other Nim module.\n\nFor example, in the [tables module](https://nim-lang.org/docs/tables.html) what is missing is:\n* a general example which shows a usage of `OrderedTable` and `CountTable`,\n* for each procedure, a short example which shows the results of applying it.\n\n**How to go about improving these?**\n\nOpen the [source file for tables module](https://github.com/nim-lang/Nim/blob/master/lib/pure/collections/tables.nim) and you'll see that the general documentation is at the top of the file, and to make an example, put it inside of a `runnableExamples` block like this, which will make sure the code snippet stays valid:\n\n```\nproc addBar*(a: string): string =\n  ## Adds \"Bar\" to ``a``.\n  runnableExamples:\n    doAssert \"baz\".addBar == \"bazBar\"\n   \n   result = a & \"Bar\"\n```\n\nFor embedded code block documentation you can also use `.. code-block::`:\n```\nproc foo*() =\n  ## Beginning of comment.\n  ##\n  ## .. code-block::\n  ##    :test:\n  ##    foo()\n  ##\n  ## Rest of comment.\n  raise newException(Exception, \"boo!\")\n```\nThe best examples are self-contained and specific. This means they show how to do one thing. You should use headings to make them as easy to understand as possible, for example:\n\n```\n## Initialising an empty table\n## ---------------------------\n##\n## An empty table can be created on the stack or on the heap.\n##\n## Stack allocated table\n## ~~~~~~~~~~~~~~~~~~~~~\n##\n## .. code-block:: nim\n##    :test:\n##   import tables\n##   var phonebook = initTable[string, string]()\n##\n## Heap allocated table\n## ~~~~~~~~~~~~~~~~~~~~~\n##\n## .. code-block:: nim\n##    :test:\n##   import tables\n##   var phonebook = newTable[string, string]()\n```\n\nIf your example is more than 5 lines of code, then it's likely too long. Consider separating it into multiple examples.\n\nNim's documentation generator uses reStructuredText, take a look at some references if you want to get more familiar with it.\n\n## Writing a library\n\nThere is a [list of needed libraries](https://github.com/nim-lang/needed-libraries/issues), can you help us shorten it?\n\nOnce you have written a library, you can send a PR to [nimble package repo](https://github.com/nim-lang/nimble) to include your package in the official list of packages!\n\nIf writing a library seems like a too demanding task, you can help improve [one of the existing Nim packages](https://nimble.directory/) by adding a feature, fixing a bug, or writing more informative documentation.\n\n\n\n# I want to help, but I've run into some problem\n\nIf you need any help, the Nim community is very welcoming.\nAsk a question in [Nim's IRC Channel on Freenode](irc://freenode.net/nim), [Nim's room on Gitter](https://gitter.im/nim-lang/Nim) or the [Nim Telegram group](https://t.me/nim_lang) and somebody will help you. Other communication channels can be found on our [community page](https://nim-lang.org/community.html).\n\nHappy coding!", "content_with_meta": "---\ntitle: Hacktoberfest with Nim\nauthor: The Nim Team\ntags: nim, python\n---\n\n[Hacktoberfest](https://hacktoberfest.digitalocean.com/) is an annual event happening in October which celebrates open source software and encourages meaningful contributions to the open source ecosystem.\n\nTo win a T-shirt, you must sign up on the [Hacktoberfest site](https://hacktoberfest.digitalocean.com/) and make five pull requests to any repo on Github by the end of October.\nEven if you don't manage to make five pull requests, you win Hacktoberfest stickers.\n\nNim would like to encourage you to participate in Hacktoberfest by contributing to the [Nim repo](https://github.com/nim-lang/nim) or any other Nim-related repos.\n\n\n\n# How can you help?\n\n* bug-fixing\n* improving documentation\n* writing a library\n\n\n\n## Bug fixing\n\n[Nim repo](https://github.com/nim-lang/nim) has more than 1400 open issues, which might be overwhelming to start.\nHere are some categories you might find interesting:\n\n* Why don't you start with some of [easy issues](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3AEasy)?\n* You can help with [cleanup](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3ACleanup).\n* You don't want to write code? Plenty of issues involve [documentation](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3ADocumentation).\n* Everybody uses stdlib. How about fixing one of the more than 200 issues in the [stdlib](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3AStdlib)?\n* You want to earn some money while fixing bugs? Here are the issues with a [bounty](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3Abounty).\n* What are our priorities? Take a look at [high priority issues](https://github.com/nim-lang/nim/issues?q=is%3Aopen+is%3Aissue+label%3A\"High+Priority\").\n\n\n\n## Improving documentation\n\nPoor documentation is often mentioned when people discuss Nim.\nLet's make it better together!\n\nBased on [this research](https://gist.github.com/GULPF/6d49e74af9992f8fc65476a9264488a0), the most used modules are: strutils, os, tables, math, sequtils, macros, times, unittest and json -- improving these would be beneficial to most people, but feel free to choose any other Nim module.\n\nFor example, in the [tables module](https://nim-lang.org/docs/tables.html) what is missing is:\n* a general example which shows a usage of `OrderedTable` and `CountTable`,\n* for each procedure, a short example which shows the results of applying it.\n\n**How to go about improving these?**\n\nOpen the [source file for tables module](https://github.com/nim-lang/Nim/blob/master/lib/pure/collections/tables.nim) and you'll see that the general documentation is at the top of the file, and to make an example, put it inside of a `runnableExamples` block like this, which will make sure the code snippet stays valid:\n\n```\nproc addBar*(a: string): string =\n  ## Adds \"Bar\" to ``a``.\n  runnableExamples:\n    doAssert \"baz\".addBar == \"bazBar\"\n   \n   result = a & \"Bar\"\n```\n\nFor embedded code block documentation you can also use `.. code-block::`:\n```\nproc foo*() =\n  ## Beginning of comment.\n  ##\n  ## .. code-block::\n  ##    :test:\n  ##    foo()\n  ##\n  ## Rest of comment.\n  raise newException(Exception, \"boo!\")\n```\nThe best examples are self-contained and specific. This means they show how to do one thing. You should use headings to make them as easy to understand as possible, for example:\n\n```\n## Initialising an empty table\n## ---------------------------\n##\n## An empty table can be created on the stack or on the heap.\n##\n## Stack allocated table\n## ~~~~~~~~~~~~~~~~~~~~~\n##\n## .. code-block:: nim\n##    :test:\n##   import tables\n##   var phonebook = initTable[string, string]()\n##\n## Heap allocated table\n## ~~~~~~~~~~~~~~~~~~~~~\n##\n## .. code-block:: nim\n##    :test:\n##   import tables\n##   var phonebook = newTable[string, string]()\n```\n\nIf your example is more than 5 lines of code, then it's likely too long. Consider separating it into multiple examples.\n\nNim's documentation generator uses reStructuredText, take a look at some references if you want to get more familiar with it.\n\n## Writing a library\n\nThere is a [list of needed libraries](https://github.com/nim-lang/needed-libraries/issues), can you help us shorten it?\n\nOnce you have written a library, you can send a PR to [nimble package repo](https://github.com/nim-lang/nimble) to include your package in the official list of packages!\n\nIf writing a library seems like a too demanding task, you can help improve [one of the existing Nim packages](https://nimble.directory/) by adding a feature, fixing a bug, or writing more informative documentation.\n\n\n\n# I want to help, but I've run into some problem\n\nIf you need any help, the Nim community is very welcoming.\nAsk a question in [Nim's IRC Channel on Freenode](irc://freenode.net/nim), [Nim's room on Gitter](https://gitter.im/nim-lang/Nim) or the [Nim Telegram group](https://t.me/nim_lang) and somebody will help you. Other communication channels can be found on our [community page](https://nim-lang.org/community.html).\n\nHappy coding!\n", "tags": ["nim", "python"], "published_at": "2019-11-23", "id": 14}, {"author_name":"xmonader", "author_email":"xmonader@gmail.com","author_image":"me.jpg","title": "Welcome our new team member, Arne Döring!", "slug": "hired-krux02", "content": "\nArne has been programming in Nim for quite some time now and has also contributed\nvaluable patches before, especially regarding Nim's macro system. Now that he\nhas completed his master thesis about how to leverage Nim's macro system to generate\nshader programs for graphical applications, he is ready to take the full dive\ninto Nim's core, the compiler and its libraries.\n\nInterestingly he wrote all the code for his master thesis in Nim and argued in\ndetail that C++ would have been unfeasible. Shader programs are separate from\nordinary native code and this means usually you are programming in a mixed\nlanguage environment with all its known downsides like the difficulty to\ndebug, the violations of DRY and the mental overhead of having to switch between\ntwo different programming languages.\n\nNim allows you to tackle these problems via its powerful macro system. Arne\ndeveloped a Nim to GLSL compiler entirely with macros. A subset of Nim is\ntranslated to GLSL code but his compiler also produces automatic interfacing\ncode between the \"native Nim world\" and the \"Nim shader world\". This interfacing\ncode usually has to be written manually and is an error prone, type unsafe task.\nNim allowed Arne to automate this critical step in realtime graphics programming,\nwe let the results speak for themselves:\n\n<iframe width=\"752\" height=\"424\" src=\"https://www.youtube.com/embed/_Hiamk2O3aM?start=192\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\nAll of these demos were created with a fraction of the code that a solution in\nC/C++ or most other common programming languages would require, the Nim code\nis small, easy to read and type safe.\n\nArne's mission is not only core Nim development but also involves improving\nthe tooling around Nim, especially Nim's debugging support. He started with\ngiving Nim a frequently requested feature; `sizeof` can now be evaluated at\ncompiletime by the Nim compiler, previously this expression was delegated to\nthe C compiler. As a nice bonus, Arne also added `alignof` and `offsetof`\nbuiltins.\n\n[We are still hiring.](https://nim-lang.org/blog/2018/09/11/nim-is-hiring.html)", "content_with_meta": "---\ntitle: \"Welcome our new team member, Arne Döring!\"\nauthor: Nim Team\nexcerpt: \"We are glad that Arne Döring joined us as a fulltime core Nim developer.\"\ntags: nim, python, markdown\n---\n\nArne has been programming in Nim for quite some time now and has also contributed\nvaluable patches before, especially regarding Nim's macro system. Now that he\nhas completed his master thesis about how to leverage Nim's macro system to generate\nshader programs for graphical applications, he is ready to take the full dive\ninto Nim's core, the compiler and its libraries.\n\nInterestingly he wrote all the code for his master thesis in Nim and argued in\ndetail that C++ would have been unfeasible. Shader programs are separate from\nordinary native code and this means usually you are programming in a mixed\nlanguage environment with all its known downsides like the difficulty to\ndebug, the violations of DRY and the mental overhead of having to switch between\ntwo different programming languages.\n\nNim allows you to tackle these problems via its powerful macro system. Arne\ndeveloped a Nim to GLSL compiler entirely with macros. A subset of Nim is\ntranslated to GLSL code but his compiler also produces automatic interfacing\ncode between the \"native Nim world\" and the \"Nim shader world\". This interfacing\ncode usually has to be written manually and is an error prone, type unsafe task.\nNim allowed Arne to automate this critical step in realtime graphics programming,\nwe let the results speak for themselves:\n\n<iframe width=\"752\" height=\"424\" src=\"https://www.youtube.com/embed/_Hiamk2O3aM?start=192\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\nAll of these demos were created with a fraction of the code that a solution in\nC/C++ or most other common programming languages would require, the Nim code\nis small, easy to read and type safe.\n\nArne's mission is not only core Nim development but also involves improving\nthe tooling around Nim, especially Nim's debugging support. He started with\ngiving Nim a frequently requested feature; `sizeof` can now be evaluated at\ncompiletime by the Nim compiler, previously this expression was delegated to\nthe C compiler. As a nice bonus, Arne also added `alignof` and `offsetof`\nbuiltins.\n\n[We are still hiring.](https://nim-lang.org/blog/2018/09/11/nim-is-hiring.html)\n", "tags": ["nim", "python", "markdown"], "published_at": "2019-1-23", "id": 15}, {"author_name":"xmonader", "author_email":"xmonader@gmail.com","author_image":"me.jpg","title": "Version 1.0 released", "slug": "version-released", "content": "\n\nToday is the day. The Nim Team is very proud\nand happy to announce the much-anticipated version 1.0 of the language.\n\nNim has always been focused on providing a compiled statically typed language\nfocusing on efficiency, readability and flexibility.\n\nVersion 1.0 marks the beginning of a stable base which\ncan be used in the coming years, knowing that the future versions of Nim won't\nbreak the code you have written with the current version.\n\nNim has built a warm and welcoming [community](https://nim-lang.org/community.html)\nwhich is ready to help newcomers to the language.\n\nIf you are one of the new users, check out our\n[learning resources](https://nim-lang.org/learn.html) and try Nim in\n[our playground](https://play.nim-lang.org/).\n\nThis release includes many changes, including bug fixes and some\nlanguage additions. All changes are documented in the v1.0.0 changelog\navailable [here](https://github.com/nim-lang/Nim/blob/devel/changelogs/changelog_1_0_0.md).\nIncluded as well is the latest release of Nimble, v0.11.0, the changelog for which is available\n[here](https://github.com/nim-lang/nimble/blob/master/changelog.markdown#0110---22092019).\n\n\n# The stability guarantee\n\nVersion 1.0 is now a long-term supported stable release that will only\nreceive bug fixes and new features in the future, as long as they don't\nbreak backwards compatibility.\n\nThe 1.0.x branch will receive bug fixes for as long as there is demand for them.\nNew features (which do not break backwards compatibility) will continue in\nsteadily advancing 1.x branches.\n\nOur goal is to make sure that code which compiled under Nim 1.0 continues to\ncompile under any stable Nim 1.x version in the future.\n\n\n## What is included under the stability guarantee?\n\nBackwards compatibility covers only the stable fragment of the language,\nas defined by the [manual](https://nim-lang.org/docs/manual.html).\n\nThe compiler still implements experimental features which are documented in the\n[\"experimental manual\"](https://nim-lang.org/docs/manual_experimental.html).\nThese features are subject to changes which may be backwards incompatible;\nsome of the features included under this umbrella are concepts,\nthe `do` notation and a few others. There are also modules in the stdlib\nwhich are still considered unstable - these have been marked with an\n\"Unstable API\" in their docs.\n\nYou can use experimental features, even in production, but be aware that\nthese are not as fleshed out as we would like them to be.\n\nThe standard library is also covered, as long as the module in question\nis clearly marked with a v1.0 tag in its documentation.\n\n\n## Exceptions to the rule\n\nWe of course have to concede that there are exceptions.\nIn certain serious cases, for example if a security vulnerability is\ndiscovered in the standard library, we reserve the right to break code which\nuses it.\n\n\n\n# Installing Nim 1.0\n\n## New users\n\nCheck out if the package manager of your OS already ships version 1.0 or\ninstall it as described [here](https://nim-lang.org/install.html).\n\n\n## Existing users\n\nIf you have installed a previous version of Nim using `choosenim`,\ngetting Nim 1.0 is as easy as:\n\n```bash\n$ choosenim update stable\n```\n\n\n\n# Contributors\n\nOver the years, more than 500 people contributed to the Nim codebase,\nimplementing new features, fixing bugs and issues, writing documentation, and\nso on.\nThe Nim team would like to thank all of you who helped us build Nim to become\nwhat it is today.\n\nWe would also want to thank all people who have created Nimble packages,\nextending what is possible to do with Nim.\nThe number of Nimble packages has been steadily growing, and in August 2019 we\nbroke the 1000 package milestone!\nWe are optimistic that with this release we will see even bigger growth of\nnew and exciting packages.\n\nIf you would like to help Nim grow consider donating via\n[Open Collective](https://opencollective.com/nim) or [other services](https://nim-lang.org/donate.html).", "content_with_meta": "---\ntitle: \"Version 1.0 released\"\nauthor: The Nim Team\nexcerpt: \"The Nim Team is very proud and happy to announce the much-anticipated version 1.0 of the language.\"\ntags: nim, python, markdown\n---\n\n\nToday is the day. The Nim Team is very proud\nand happy to announce the much-anticipated version 1.0 of the language.\n\nNim has always been focused on providing a compiled statically typed language\nfocusing on efficiency, readability and flexibility.\n\nVersion 1.0 marks the beginning of a stable base which\ncan be used in the coming years, knowing that the future versions of Nim won't\nbreak the code you have written with the current version.\n\nNim has built a warm and welcoming [community](https://nim-lang.org/community.html)\nwhich is ready to help newcomers to the language.\n\nIf you are one of the new users, check out our\n[learning resources](https://nim-lang.org/learn.html) and try Nim in\n[our playground](https://play.nim-lang.org/).\n\nThis release includes many changes, including bug fixes and some\nlanguage additions. All changes are documented in the v1.0.0 changelog\navailable [here](https://github.com/nim-lang/Nim/blob/devel/changelogs/changelog_1_0_0.md).\nIncluded as well is the latest release of Nimble, v0.11.0, the changelog for which is available\n[here](https://github.com/nim-lang/nimble/blob/master/changelog.markdown#0110---22092019).\n\n\n# The stability guarantee\n\nVersion 1.0 is now a long-term supported stable release that will only\nreceive bug fixes and new features in the future, as long as they don't\nbreak backwards compatibility.\n\nThe 1.0.x branch will receive bug fixes for as long as there is demand for them.\nNew features (which do not break backwards compatibility) will continue in\nsteadily advancing 1.x branches.\n\nOur goal is to make sure that code which compiled under Nim 1.0 continues to\ncompile under any stable Nim 1.x version in the future.\n\n\n## What is included under the stability guarantee?\n\nBackwards compatibility covers only the stable fragment of the language,\nas defined by the [manual](https://nim-lang.org/docs/manual.html).\n\nThe compiler still implements experimental features which are documented in the\n[\"experimental manual\"](https://nim-lang.org/docs/manual_experimental.html).\nThese features are subject to changes which may be backwards incompatible;\nsome of the features included under this umbrella are concepts,\nthe `do` notation and a few others. There are also modules in the stdlib\nwhich are still considered unstable - these have been marked with an\n\"Unstable API\" in their docs.\n\nYou can use experimental features, even in production, but be aware that\nthese are not as fleshed out as we would like them to be.\n\nThe standard library is also covered, as long as the module in question\nis clearly marked with a v1.0 tag in its documentation.\n\n\n## Exceptions to the rule\n\nWe of course have to concede that there are exceptions.\nIn certain serious cases, for example if a security vulnerability is\ndiscovered in the standard library, we reserve the right to break code which\nuses it.\n\n\n\n# Installing Nim 1.0\n\n## New users\n\nCheck out if the package manager of your OS already ships version 1.0 or\ninstall it as described [here](https://nim-lang.org/install.html).\n\n\n## Existing users\n\nIf you have installed a previous version of Nim using `choosenim`,\ngetting Nim 1.0 is as easy as:\n\n```bash\n$ choosenim update stable\n```\n\n\n\n# Contributors\n\nOver the years, more than 500 people contributed to the Nim codebase,\nimplementing new features, fixing bugs and issues, writing documentation, and\nso on.\nThe Nim team would like to thank all of you who helped us build Nim to become\nwhat it is today.\n\nWe would also want to thank all people who have created Nimble packages,\nextending what is possible to do with Nim.\nThe number of Nimble packages has been steadily growing, and in August 2019 we\nbroke the 1000 package milestone!\nWe are optimistic that with this release we will see even bigger growth of\nnew and exciting packages.\n\nIf you would like to help Nim grow consider donating via\n[Open Collective](https://opencollective.com/nim) or [other services](https://nim-lang.org/donate.html).\n", "tags": ["nim", "python", "markdown"], "published_at": "2019-5-23", "id": 16}]